<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>剑指 Offer 24. 反转链表</title>
      <link href="2022/04/12/jian-zhi-offer-24.fan-zhuan-lian-biao/"/>
      <url>2022/04/12/jian-zhi-offer-24.fan-zhuan-lian-biao/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 24. 反转链表<br>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p><p>示例:<br>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>p为首节点，q为空节点；遍历p的同时保存p_next=p.next，并将p节点作为q的首节点p.next=q，然后更新p和q。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span>next <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        p<span class="token punctuation">,</span> q <span class="token operator">=</span> head<span class="token punctuation">,</span> None        <span class="token keyword">while</span> p<span class="token punctuation">:</span>            p_next <span class="token operator">=</span> p<span class="token punctuation">.</span>next            p<span class="token punctuation">.</span>next <span class="token operator">=</span> q            q <span class="token operator">=</span> p            p <span class="token operator">=</span> p_next        <span class="token keyword">return</span> q</code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 05. 替换空格</title>
      <link href="2022/04/12/jian-zhi-offer-05.ti-huan-kong-ge/"/>
      <url>2022/04/12/jian-zhi-offer-05.ti-huan-kong-ge/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 05. 替换空格<br>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。</p><p>示例 1：<br>输入：s = “We are happy.”<br>输出：”We%20are%20happy.”</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>先利用空格数量开辟空间，然后根据双指针所指的元素从后向前进行替换操作。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        s <span class="token operator">=</span> list<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        cnt <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">:</span>                cnt <span class="token operator">+=</span> <span class="token number">1</span>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">+</span>cnt<span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span>        s <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token operator">*</span>cnt<span class="token operator">*</span><span class="token number">2</span>        <span class="token keyword">while</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">:</span>                s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span>                s<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'2'</span>                s<span class="token punctuation">[</span>j<span class="token number">-2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'%'</span>                j <span class="token operator">-=</span> <span class="token number">3</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                j <span class="token operator">-=</span> <span class="token number">1</span>            i <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 06. 从尾到头打印链表</title>
      <link href="2022/04/12/jian-zhi-offer-06.cong-wei-dao-tou-da-yin-lian-biao/"/>
      <url>2022/04/12/jian-zhi-offer-06.cong-wei-dao-tou-da-yin-lian-biao/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 06. 从尾到头打印链表<br>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><p>示例 1：<br>输入：head = [1,3,2]<br>输出：[2,3,1]</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>法一：遍历链表的同时，将所有元素入栈，利用栈先进后出特性可以取出所有元素。<br>法二：递归本质就是一个栈结构，先访问每一个节点，然后将节点添加到结果数组中。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span>next <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reversePrint</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">get_reverse</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> p <span class="token operator">!=</span> None<span class="token punctuation">:</span>                get_reverse<span class="token punctuation">(</span>p<span class="token punctuation">.</span>next<span class="token punctuation">)</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        get_reverse<span class="token punctuation">(</span>head<span class="token punctuation">)</span>        <span class="token keyword">return</span> res</code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 04. 二维数组中的查找</title>
      <link href="2022/04/12/jian-zhi-offer-04.er-wei-shu-zu-zhong-de-cha-zhao/"/>
      <url>2022/04/12/jian-zhi-offer-04.er-wei-shu-zu-zhong-de-cha-zhao/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 04. 二维数组中的查找<br>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p>示例:</p><p>现有矩阵 matrix 如下：</p><p>[<br>  [1,   4,  7, 11, 15],<br>  [2,   5,  8, 12, 19],<br>  [3,   6,  9, 16, 22],<br>  [10, 13, 14, 17, 24],<br>  [18, 21, 23, 26, 30]<br>]<br>target=5 true<br>traget=20 false</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>利用矩阵单调性解题，左上角的元素一定是对应列的最小值，一定是对应行的最大值，通过该特性可以不断缩小搜索范围。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        m<span class="token punctuation">,</span> n <span class="token operator">=</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> m <span class="token operator">and</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">while</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">:</span>                j <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> m <span class="token operator">and</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>matrix <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>   <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span>   <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span>   <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">]</span>target <span class="token operator">=</span> <span class="token number">20</span>solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>findNumberIn2DArray<span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 09. 用两个栈实现队列</title>
      <link href="2022/04/12/jian-zhi-offer-09.yong-liang-ge-zhan-shi-xian-dui-lie/"/>
      <url>2022/04/12/jian-zhi-offer-09.yong-liang-ge-zhan-shi-xian-dui-lie/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 09. 用两个栈实现队列<br>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead&nbsp;操作返回 -1 )</p><p>示例 1：<br>输入：<br>[“CQueue”,”appendTail”,”deleteHead”,”deleteHead”]<br>[[],[3],[],[]]<br>输出：[null,null,3,-1]<br>示例 2：</p><p>输入：<br>[“CQueue”,”deleteHead”,”appendTail”,”appendTail”,”deleteHead”,”deleteHead”]<br>[[],[],[5],[2],[],[]]<br>输出：[null,-1,null,null,5,2]</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>使用A和B两个栈模拟队列的插入和删除操作。进队列直接看做进入A栈，出队列操作需要把A栈数据全部倒入B栈，然后弹出栈顶元素。<br>注意B栈为空时才能将A栈数据全部倒入，否则直接弹出B栈现存的栈顶元素即可。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CQueue</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>top1<span class="token punctuation">,</span> self<span class="token punctuation">.</span>top2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>        self<span class="token punctuation">.</span>s1<span class="token punctuation">,</span> self<span class="token punctuation">.</span>s2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">1010</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">1010</span>    <span class="token keyword">def</span> <span class="token function">appendTail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>top1 <span class="token operator">+=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>s1<span class="token punctuation">[</span>self<span class="token punctuation">.</span>top1<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">def</span> <span class="token function">deleteHead</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>top1 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">and</span> self<span class="token punctuation">.</span>top2 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>top2 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> self<span class="token punctuation">.</span>top1 <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                t <span class="token operator">=</span> self<span class="token punctuation">.</span>s1<span class="token punctuation">[</span>self<span class="token punctuation">.</span>top1<span class="token punctuation">]</span>                self<span class="token punctuation">.</span>top1 <span class="token operator">-=</span> <span class="token number">1</span>                self<span class="token punctuation">.</span>top2 <span class="token operator">+=</span> <span class="token number">1</span>                self<span class="token punctuation">.</span>s2<span class="token punctuation">[</span>self<span class="token punctuation">.</span>top2<span class="token punctuation">]</span> <span class="token operator">=</span> t        t <span class="token operator">=</span> self<span class="token punctuation">.</span>s2<span class="token punctuation">[</span>self<span class="token punctuation">.</span>top2<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>top2 <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> t</code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 07. 重建二叉树</title>
      <link href="2022/04/12/jian-zhi-offer-07.chong-jian-er-cha-shu/"/>
      <url>2022/04/12/jian-zhi-offer-07.chong-jian-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 07. 重建二叉树<br>输入某二叉树的前序遍历和中序遍历的结果，请构建该二叉树并返回其根节点。<br>假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p><p>示例 1:<br>Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]<br>Output: [3,9,20,null,null,15,7]<br>示例 2:</p><p>Input: preorder = [-1], inorder = [-1]<br>Output: [-1]</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>根据前序数组的首元素可确定根节点，根据中序数组可确定该根节点对应的左右子树。<br>然后，根据确定的左/右子树的前序数组和中序数组继续递归。<br>伪代码：root.left = dfs(左子树前序数组，左子树中序数组)；root.right = dfs(右子树前序数组，右子树中序数组)。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span>left <span class="token operator">=</span> None        self<span class="token punctuation">.</span>right <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> preorder<span class="token punctuation">,</span> inorder<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> pre_l<span class="token punctuation">,</span> pre_r<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> in_l<span class="token punctuation">,</span> in_r<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> pre_r <span class="token operator">&lt;</span> pre_l<span class="token punctuation">:</span>                <span class="token keyword">return</span> None            idx <span class="token operator">=</span> inorder<span class="token punctuation">.</span>index<span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>pre_l<span class="token punctuation">]</span><span class="token punctuation">)</span>            root <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>pre_l<span class="token punctuation">]</span><span class="token punctuation">)</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> dfs<span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> pre_l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pre_l <span class="token operator">+</span> idx <span class="token operator">-</span> in_l<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> in_l<span class="token punctuation">,</span> idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> dfs<span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> pre_l <span class="token operator">+</span> idx <span class="token operator">-</span> in_l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pre_r<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> in_r<span class="token punctuation">)</span>            <span class="token keyword">return</span> root        pre_l<span class="token punctuation">,</span> pre_r<span class="token punctuation">,</span> in_l<span class="token punctuation">,</span> in_r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>preorder<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>inorder<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        root <span class="token operator">=</span> dfs<span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> pre_l<span class="token punctuation">,</span> pre_r<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> in_l<span class="token punctuation">,</span> in_r<span class="token punctuation">)</span>        <span class="token keyword">return</span> root</code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 11. 旋转数组的最小数字</title>
      <link href="2022/04/12/jian-zhi-offer-11.xuan-zhuan-shu-zu-de-zui-xiao-shu-zi/"/>
      <url>2022/04/12/jian-zhi-offer-11.xuan-zhuan-shu-zu-de-zui-xiao-shu-zi/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 11. 旋转数组的最小数字<br>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。</p><p>给你一个可能存在 重复 元素值的数组 numbers ，它原来是一个升序排列的数组，并按上述情形进行了一次旋转。请返回旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一次旋转，该数组的最小值为 1。</p><p>注意，数组 [a[0], a[1], a[2], …, a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], …, a[n-2]] 。</p><p>示例 1：</p><p>输入：numbers = [3,4,5,1,2]<br>输出：1<br>示例 2：</p><p>输入：numbers = [2,2,2,0,1]<br>输出：0</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>利用左区间一定大于右区间解题，求右区间的左端点。<br>arr[mid]&gt;arr[r],l=mid+1；arr[mid]&lt;arr[r],r=mid；因为存在[3,3,1,3]这种情况，当arr[mid]==arr[r]时，不能r=mid，而是r-=1。</p><p>为何不能用左区间左端点作为判断依据？<br>eg:1 2 3。实际左区间无，右区间为1 2 3；<br>以1作为判断点。按照&gt;=1为左区间，则得到的结果刚好相反。<br>以3作为判断点。按照&lt;=3为右区间，则得到结果与实际相同。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numbers<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> l <span class="token operator">>=</span> r<span class="token punctuation">:</span>                <span class="token keyword">return</span> numbers<span class="token punctuation">[</span>l<span class="token punctuation">]</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            <span class="token keyword">if</span> numbers<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> numbers<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>                r <span class="token operator">=</span> mid            <span class="token keyword">elif</span> numbers<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> numbers<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>                r <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">return</span> binary_search<span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span>        <span class="token keyword">return</span> binary_search<span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>minArray<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 12. 矩阵中的路径</title>
      <link href="2022/04/12/jian-zhi-offer-12.ju-zhen-zhong-de-lu-jing/"/>
      <url>2022/04/12/jian-zhi-offer-12.ju-zhen-zhong-de-lu-jing/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 12. 矩阵中的路径<br>给定一个m x n 二维字符网格board 和一个字符串单词word 。如果word 存在于网格中，返回 true ；否则，返回 false 。<br>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p><p>A B C E<br>S F C S<br>A D E E  ABCCED=&gt;True</p><p>输入：board = [[“A”,”B”,”C”,”E”],[“S”,”F”,”C”,”S”],[“A”,”D”,”E”,”E”]], word = “ABCCED”<br>输出：true<br>示例 2：</p><p>输入：board = [[“a”,”b”],[“c”,”d”]], word = “abcd”<br>输出：false</p><p>示例 1：<br>输入：board = [[“A”,”B”,”C”,”E”],[“S”,”F”,”C”,”S”],[“A”,”D”,”E”,”E”]], word = “ABCCED”<br>输出：true<br>示例 2：</p><p>输入：board = [[“a”,”b”],[“c”,”d”]], word = “abcd”<br>输出：false</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>dfs函数传入u作为递归终止条件，数组mark记录走过的路径并回溯，使用剪枝提前终止递归。<br>当需要判断True/False时，考虑res = dfs(…) or dfs(…)。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">exist</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> board<span class="token punctuation">,</span> word<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">global</span> row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> n        row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> n <span class="token operator">=</span> len<span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>word<span class="token punctuation">)</span>        mark <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>col <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> u <span class="token operator">==</span> n<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">or</span> i <span class="token operator">>=</span> row <span class="token operator">or</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">or</span> j <span class="token operator">>=</span> col <span class="token operator">or</span> mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">or</span> word<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">!=</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            dx<span class="token punctuation">,</span> dy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 等同于flag = dfs(u + 1, i - 1, j) or dfs(u + 1, i + 1, j) or dfs(u + 1, i, j - 1) or dfs(u + 1, i, j + 1)</span>            flag <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                x<span class="token punctuation">,</span> y <span class="token operator">=</span> i <span class="token operator">+</span> dx<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> j <span class="token operator">+</span> dy<span class="token punctuation">[</span>k<span class="token punctuation">]</span>                mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                flag <span class="token operator">=</span> flag <span class="token operator">or</span> dfs<span class="token punctuation">(</span>u<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>                mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">return</span> flag        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>board <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"E"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"S"</span><span class="token punctuation">,</span><span class="token string">"F"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"S"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">,</span><span class="token string">"E"</span><span class="token punctuation">,</span><span class="token string">"E"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>word <span class="token operator">=</span> <span class="token string">"ABCCED"</span>solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>exist<span class="token punctuation">(</span>board<span class="token operator">=</span>board<span class="token punctuation">,</span> word<span class="token operator">=</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 13. 机器人的运动范围</title>
      <link href="2022/04/12/jian-zhi-offer-13.ji-qi-ren-de-yun-dong-fan-wei/"/>
      <url>2022/04/12/jian-zhi-offer-13.ji-qi-ren-de-yun-dong-fan-wei/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 13. 机器人的运动范围<br>地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？</p><p>示例 1：</p><p>输入：m = 2, n = 3, k = 1<br>输出：3<br>示例 2：</p><p>输入：m = 3, n = 1, k = 0<br>输出：1<br>提示：</p><p>1 &lt;= n,m &lt;= 100<br>0 &lt;= k &lt;= 20</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>模版<br>// 初始化队列<br>while q.qsize():<br>    t = q.get()<br>    // 扩展t，入队列</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">movingCount</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">:</span> int<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">from</span> collections <span class="token keyword">import</span> deque        <span class="token keyword">def</span> <span class="token function">get_digit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> i<span class="token punctuation">:</span>                res <span class="token operator">+=</span> i <span class="token operator">%</span> <span class="token number">10</span>                i <span class="token operator">=</span> i <span class="token operator">//</span> <span class="token number">10</span>            <span class="token keyword">return</span> res        <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> get_digit<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> get_digit<span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> k<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        res <span class="token operator">=</span> <span class="token number">1</span>        dx<span class="token punctuation">,</span> dy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        mark <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>        mark<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>        q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> len<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>            t <span class="token operator">=</span> q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                x<span class="token punctuation">,</span> y <span class="token operator">=</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">if</span> x <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> x <span class="token operator">&lt;</span> m <span class="token operator">and</span> y <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> y <span class="token operator">&lt;</span> n <span class="token operator">and</span> <span class="token operator">not</span> mark<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">and</span> check<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>                    res <span class="token operator">+=</span> <span class="token number">1</span>                    mark<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> resm<span class="token punctuation">,</span> n<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span>solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>movingCount<span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 14- I. 剪绳子</title>
      <link href="2022/04/12/jian-zhi-offer-14-i.jian-sheng-zi/"/>
      <url>2022/04/12/jian-zhi-offer-14-i.jian-sheng-zi/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 14- I. 剪绳子<br>给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 k[0],k[1]…k[m-1] 。请问 k[0]<em>k[1]</em>…*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p><p>示例 1：</p><p>输入: 2<br>输出: 1<br>解释: 2 = 1 + 1, 1 × 1 = 1<br>示例 2:</p><p>输入: 10<br>输出: 36<br>解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>贪心解法。<br>贪心。尽可能剪成长度为3的子串，其次长度为2的子串。注意长度为4时，2<em>2&gt;1</em>3，故需要当最后剩下子串为4（n%3==1），需要特殊处理。<br>4=》2 2=》4<br>5=》3 2=》6<br>6=》3 3=》9<br>7=》3 2 2=》12<br>8=》3 3 2=》18</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 贪心</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">cuttingRope</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">2</span>        t3 <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token number">3</span>        <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            t3 <span class="token operator">-=</span> <span class="token number">1</span>        t2 <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">3</span> <span class="token operator">*</span> t3<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">**</span> t3<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> t2<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000007</span>solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>cuttingRope<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>DP解法。<br>①状态表示 f(n)，长度为n的绳子，剪开后的最大乘积。<br>②状态转移 f(n)=max(f(n), f(i)*f(n-i))，当前绳长等于剪开一次后两个子绳的最大乘积。<br>例如长度为5的绳子，f(5) = max(f(1)*f(4), f(2)*f(3))<br>注意点，当2=》1，3=》2，4=》4，5=》6，注意到仅当n&gt;=4时，才会有最大乘积大于绳长的情况，所以在f函数初始化时，2、3要以当前绳长作为初始值。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># DP</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">cuttingRope</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token keyword">elif</span> n <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">2</span>        f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>        f<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">//</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span>solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>cuttingRope<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 15. 二进制中1的个数</title>
      <link href="2022/04/12/jian-zhi-offer-15.er-jin-zhi-zhong-1-de-ge-shu/"/>
      <url>2022/04/12/jian-zhi-offer-15.er-jin-zhi-zhong-1-de-ge-shu/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 15. 二进制中1的个数<br>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为 汉明重量).）。</p><p>示例 1：</p><p>输入：n = 11 (控制台输入 00000000000000000000000000001011)<br>输出：3<br>解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 ‘1’。</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>求n的第k位数字，k &amp; 1。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> n<span class="token punctuation">:</span>            res <span class="token operator">+=</span> n <span class="token operator">&amp;</span> <span class="token number">1</span>            n <span class="token operator">=</span> n <span class="token operator">>></span> <span class="token number">1</span>        <span class="token keyword">return</span> ressolution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>hammingWeight<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>消除最低位的1，n&amp;(n-1)。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> n<span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token number">1</span>            n <span class="token operator">=</span> n <span class="token operator">&amp;</span> n<span class="token number">-1</span>        <span class="token keyword">return</span> res</code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 16. 数值的整数次方</title>
      <link href="2022/04/12/jian-zhi-offer-16.shu-zhi-de-zheng-shu-ci-fang/"/>
      <url>2022/04/12/jian-zhi-offer-16.shu-zhi-de-zheng-shu-ci-fang/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 16. 数值的整数次方<br>实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。不得使用库函数，同时不需要考虑大数问题。</p><p>示例 1：</p><p>输入：x = 2.00000, n = 10<br>输出：1024.00000<br>示例 2：</p><p>输入：x = 2.10000, n = 3<br>输出：9.26100<br>示例 3：</p><p>输入：x = 2.00000, n = -2<br>输出：0.25000<br>解释：2-2 = 1/22 = 1/4 = 0.25</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>快速幂。分治算法，当n为偶数x^(n//2)*x^(n//2)，n为奇数x^(n//2)*x^(n//2)*x，递归求解。<br>①n为偶数，x-&gt;x2-&gt;x4-&gt;x8-&gt;x16-&gt;x32-&gt;x64。<br>②n为奇数，x-&gt;x2-&gt;x4-&gt;x8-&gt;x16-&gt;x33-&gt;x67。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">myPow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> float<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> float<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">quick_mul</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">""" 快速幂 """</span>            <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">1</span>            y <span class="token operator">=</span> quick_mul<span class="token punctuation">(</span>x<span class="token punctuation">,</span> n <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> y <span class="token operator">*</span> y <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> y <span class="token operator">*</span> y <span class="token operator">*</span> x        <span class="token keyword">return</span> quick_mul<span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token keyword">if</span> n <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">else</span> quick_mul<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token operator">-</span>n<span class="token punctuation">)</span>solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>myPow<span class="token punctuation">(</span><span class="token number">0.44</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 17. 打印从1到最大的n位数</title>
      <link href="2022/04/12/jian-zhi-offer-17.da-yin-cong-1-dao-zui-da-de-n-wei-shu/"/>
      <url>2022/04/12/jian-zhi-offer-17.da-yin-cong-1-dao-zui-da-de-n-wei-shu/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 17. 打印从1到最大的n位数<br>输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。</p><p>示例 1:</p><p>输入: n = 1<br>输出: [1,2,3,4,5,6,7,8,9]</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>利用DFS对数字进行全排列，dfs输入u步数作为递归终止条件，mark数组标记走过的路径，path存储路径。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">printNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> u <span class="token operator">==</span> n<span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>u<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 18. 删除链表的节点</title>
      <link href="2022/04/12/jian-zhi-offer-18.shan-chu-lian-biao-de-jie-dian/"/>
      <url>2022/04/12/jian-zhi-offer-18.shan-chu-lian-biao-de-jie-dian/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 03. 数组中重复的数字<br>找出数组中重复的数字。</p><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p>示例 1：<br>输入：<br>[2, 3, 1, 0, 2, 5, 3]<br>输出：2 或 3 </p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>遍历节点的同时保留一个前驱节点，若当前为目标节点，pre.next = p.next。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span>next <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> val<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> head<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">:</span>            <span class="token keyword">return</span> head<span class="token punctuation">.</span>next        p <span class="token operator">=</span> head        pre_p <span class="token operator">=</span> None        <span class="token keyword">while</span> p<span class="token punctuation">:</span>            <span class="token keyword">if</span> p<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">:</span>                <span class="token keyword">break</span>            pre_p <span class="token operator">=</span> p            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next        pre_p<span class="token punctuation">.</span>next <span class="token operator">=</span> pre_p<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next        <span class="token keyword">return</span> head</code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 21. 调整数组顺序使奇数位于偶数前面</title>
      <link href="2022/04/12/jian-zhi-offer-21.diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian/"/>
      <url>2022/04/12/jian-zhi-offer-21.diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 21. 调整数组顺序使奇数位于偶数前面<br>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数在数组的前半部分，所有偶数在数组的后半部分。</p><p>示例：</p><p>输入：nums =[1,2,3,4]<br>输出：[1,3,2,4]<br>注：[3,1,2,4] 也是正确的答案之一。</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>前后双指针，后指针找到一个奇数，前指针找到一个偶数，i&lt;j则交换二者位置。（PS:快速排序使用了相同的技巧）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">exchange</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>            <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">if</span> i <span class="token operator">>=</span> j <span class="token operator">or</span> <span class="token operator">not</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>            <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>                j <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">if</span> j <span class="token operator">&lt;=</span> i <span class="token operator">or</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> numsnums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>exchange<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 22. 链表中倒数第k个节点</title>
      <link href="2022/04/12/jian-zhi-offer-22.lian-biao-zhong-dao-shu-di-k-ge-jie-dian/"/>
      <url>2022/04/12/jian-zhi-offer-22.lian-biao-zhong-dao-shu-di-k-ge-jie-dian/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 22. 链表中倒数第k个节点<br>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。</p><p>例如，一个链表有 6 个节点，从头节点开始，它们的值依次是 1、2、3、4、5、6。这个链表的倒数第 3 个节点是值为 4 的节点。</p><p>示例：</p><p>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k = 2.</p><p>返回链表 4-&gt;5.</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>快慢双指针，快指针先走k步，然后慢指针再走，当快指针走到头时，慢指针即为倒数第k个数。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span>next <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getKthFromEnd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        p<span class="token punctuation">,</span> q <span class="token operator">=</span> head<span class="token punctuation">,</span> head        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> q<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">>=</span> k<span class="token punctuation">:</span>                p <span class="token operator">=</span> p<span class="token punctuation">.</span>next            q <span class="token operator">=</span> q<span class="token punctuation">.</span>next            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> p</code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 19. 正则表达式匹配</title>
      <link href="2022/04/12/jian-zhi-offer-19.zheng-ze-biao-da-shi-pi-pei/"/>
      <url>2022/04/12/jian-zhi-offer-19.zheng-ze-biao-da-shi-pi-pei/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 19. 正则表达式匹配<br>请实现一个函数用来匹配包含’. ‘和’<em>‘的正则表达式。模式中的字符’.’表示任意一个字符，而’</em>‘表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”ab<em>ac</em>a”匹配，但与”aa.a”和”ab*a”均不匹配。</p><p>示例 1:</p><p>输入:<br>s = “aa”<br>p = “a”<br>输出: false<br>解释: “a” 无法匹配 “aa” 整个字符串。<br>示例 2:</p><p>输入:<br>s = “aa”<br>p = “a*”<br>输出: true<br>解释: 因为 ‘*’ 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 ‘a’。因此，字符串 “aa” 可被视为 ‘a’ 重复了一次。</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>①状态表示。f(i,j)，f(i,j)是s和p是否存在一个合法方案。</p><p>②状态转移。s和p为两个串,f为状态转移方程，则</p><pre class=" language-公式"><code class="language-公式">s---------------               ip-------------             j1. p[j] not '*' and i, f(i,j)=(s[i]==p[j]||p[j]=='.')&&f(i-1,j-1)2. p[j] == '*', f(i,j)=f(i,j-2)||(f(i-1,j-2)&&s[i]==p[j-1])||(f(i-2,j-2)&&s[i]==p[j-1]&&s[i-1]==p[j-1]) ①               f(i-1,j)=f(i-1,j-2)||(f(i-2,j-2)&&s[i-1]==p[j-1])||(f(i-3,j-2)&&s[i-1]==p[j-1]&&s[i-2]==p[j-1]) ②=>f(i,j)=f(i,j-2)||(f(i-1,j)&&(s[i]==p[j-1]||p[j-1]=='.'))</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">,</span> p<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        n<span class="token punctuation">,</span> m <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>p<span class="token punctuation">)</span>        f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        s<span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token string">' '</span><span class="token operator">+</span>s<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token operator">+</span>p        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> j<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;=</span> m <span class="token operator">and</span> p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                <span class="token keyword">if</span> i <span class="token operator">and</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'*'</span><span class="token punctuation">:</span>                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">and</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">or</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span>                <span class="token keyword">elif</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> bool<span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-2</span><span class="token punctuation">]</span> <span class="token operator">or</span> i <span class="token operator">and</span> f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">and</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">or</span> p<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 48. 最长不含重复字符的子字符串</title>
      <link href="2022/04/12/jian-zhi-offer-48.zui-chang-bu-han-chong-fu-zi-fu-de-zi-zi-fu-chuan/"/>
      <url>2022/04/12/jian-zhi-offer-48.zui-chang-bu-han-chong-fu-zi-fu-de-zi-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 48. 最长不含重复字符的子字符串<br>请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。</p><p>示例 1:</p><p>输入: “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。<br>示例 2:</p><p>输入: “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。<br>示例 3:</p><p>输入: “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>遍历数组，设置一个双向队列存储无重复子串，当前元素不在队列中则直接加入队列，当前元素若已在队列中则从左边弹出元素直至队列中不再存在当前元素。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> collections<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        q <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> list<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> q<span class="token punctuation">:</span>                <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>                    t <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> t <span class="token operator">==</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                        <span class="token keyword">break</span>            q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            res <span class="token operator">=</span> max<span class="token punctuation">(</span>res<span class="token punctuation">,</span> len<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res</code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 49. 丑数</title>
      <link href="2022/04/12/jian-zhi-offer-49.chou-shu/"/>
      <url>2022/04/12/jian-zhi-offer-49.chou-shu/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 49. 丑数<br>我们把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。</p><p>示例:</p><p>输入: n = 10<br>输出: 12<br>解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。<br>说明:</p><p>1 是丑数。<br>n 不超过1690。</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>DP+三指针<br>①状态表示 f(i)第i个丑数对应的数字。<br>②状态转移 f(i)=min(f(a)*2,f(b)*3,f(c)*5)，其中a、b、c是从头开始移动的三个指针，abc中一定存在一个或多个恰好大于f[i-1]的数。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">nthUglyNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        i <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>            _min <span class="token operator">=</span> min<span class="token punctuation">(</span>f<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> _min <span class="token operator">==</span> f<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">:</span>                a <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> _min <span class="token operator">==</span> f<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">:</span>                b <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> _min <span class="token operator">==</span> f<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">:</span>                c <span class="token operator">+=</span> <span class="token number">1</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> _min            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> f<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 67. 把字符串转换成整数</title>
      <link href="2022/04/08/jian-zhi-offer-67.ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu/"/>
      <url>2022/04/08/jian-zhi-offer-67.ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 67. 把字符串转换成整数<br>写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。</p><p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。<br>当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。<br>该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。</p><p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。<br>在任何情况下，若函数不能进行有效的转换时，请返回 0。</p><p>说明：<br>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p><p>示例 1:<br>输入: “42”<br>输出: 42<br>示例 2:</p><p>输入: “   -42”<br>输出: -42<br>解释: 第一个非空白字符为 ‘-‘, 它是一个负号。<br>     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。<br>示例 3:</p><p>输入: “4193 with words”<br>输出: 4193<br>解释: 转换截止于数字 ‘3’ ，因为它的下一个字符不为数字。<br>示例 4:</p><p>输入: “words and 987”<br>输出: 0<br>解释: 第一个非空字符是 ‘w’, 但它不是数字或正、负号。<br>     因此无法执行有效的转换。<br>示例 5:</p><p>输入: “-91283472332”<br>输出: -2147483648<br>解释: 数字 “-91283472332” 超过 32 位有符号整数范围。<br>     因此返回 INT_MIN (−231) 。<br>“””</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>去掉两边的空字符，然后保存首位的正负号；<br>遍历数组，若字符为符号字符(+/-)且在开头则跳过，若为数字字符则res=res*10+ord(s[i])-48，否则为非法字符则跳出循环。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">strToInt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        _min<span class="token punctuation">,</span> _max <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span>        str <span class="token operator">=</span> str<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        flag <span class="token operator">=</span> <span class="token number">1</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">if</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">or</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">elif</span> ord<span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> ord<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">and</span> ord<span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> ord<span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                res <span class="token operator">=</span> res<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> ord<span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> ord<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        res <span class="token operator">=</span> flag<span class="token operator">*</span>res        <span class="token keyword">if</span> res <span class="token operator">></span> _max<span class="token punctuation">:</span>            <span class="token keyword">return</span> _max        <span class="token keyword">if</span> res <span class="token operator">&lt;</span> _min<span class="token punctuation">:</span>            <span class="token keyword">return</span> _min        <span class="token keyword">return</span> resstr <span class="token operator">=</span> <span class="token string">"-91283472332"</span>solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>strToInt<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 03. 数组中重复的数字</title>
      <link href="2022/04/08/jian-zhi-offer-03.shu-zu-zhong-chong-fu-de-shu-zi/"/>
      <url>2022/04/08/jian-zhi-offer-03.shu-zu-zhong-chong-fu-de-shu-zi/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 03. 数组中重复的数字<br>找出数组中重复的数字。</p><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p>示例 1：<br>输入：<br>[2, 3, 1, 0, 2, 5, 3]<br>输出：2 或 3 </p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>根据每个数字都有一个对应的索引。<br>若当前元素已经在对应索引上则遍历下一个元素；若当前元素不等于对应的索引，则与对应索引的元素进行交换，保证该元素在对应索引上，但若对应索引已经有一个正确的元素，那说明当前元素为重复元素。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            t <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> t <span class="token operator">==</span> i<span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">:</span>                    <span class="token keyword">return</span> t                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>findRepeatNumber<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 27. 二叉树的镜像</title>
      <link href="2022/04/08/jian-zhi-offer-27.er-cha-shu-de-jing-xiang/"/>
      <url>2022/04/08/jian-zhi-offer-27.er-cha-shu-de-jing-xiang/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 27. 二叉树的镜像<br>请完成一个函数，输入一个二叉树，该函数输出它的镜像。</p><p>例如输入：</p><pre><code> 4</code></pre><p>   /   <br>  2     7<br> / \   / <br>1   3 6   9<br>镜像输出：</p><pre><code> 4</code></pre><p>   /   <br>  7     2<br> / \   / <br>9   6 3   1</p><p>示例 1：</p><p>输入：root = [4,2,7,1,3,6,9]<br>输出：[4,7,2,9,6,3,1]</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>前序遍历，每个根节点交换其左右叶子节点。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span>left <span class="token operator">=</span> None        self<span class="token punctuation">.</span>right <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mirrorTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span>        root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root<span class="token punctuation">.</span>left        self<span class="token punctuation">.</span>mirrorTree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mirrorTree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> root</code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 10- II. 青蛙跳台阶问题</title>
      <link href="2022/04/08/jian-zhi-offer-10-ii.qing-wa-tiao-tai-jie-wen-ti/"/>
      <url>2022/04/08/jian-zhi-offer-10-ii.qing-wa-tiao-tai-jie-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 10- II. 青蛙跳台阶问题<br>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p><p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p><p>示例 1：</p><p>输入：n = 2<br>输出：2<br>示例 2：</p><p>输入：n = 7<br>输出：21<br>示例 3：</p><p>输入：n = 0<br>输出：1</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>DP<br>①状态表达。f(i)为前f(i-1)和f(i-2)之和。<br>②状态转移。f(n) = f(n-1)+f(n-2)。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numWays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            t <span class="token operator">=</span> a<span class="token operator">+</span>b            a <span class="token operator">=</span> b            b <span class="token operator">=</span> t        <span class="token keyword">return</span> t <span class="token operator">%</span> <span class="token number">1000000007</span>solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>numWays<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 10- I. 斐波那契数列</title>
      <link href="2022/04/07/jian-zhi-offer-10-i.fei-bo-na-qi-shu-lie/"/>
      <url>2022/04/07/jian-zhi-offer-10-i.fei-bo-na-qi-shu-lie/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 10- I. 斐波那契数列<br>写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项（即 F(N)）。斐波那契数列的定义如下：</p><p>F(0) = 0,   F(1) = 1<br>F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.<br>斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</p><p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p><p>示例 1：<br>输入：n = 2<br>输出：1<br>示例 2：</p><p>输入：n = 5<br>输出：5</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>DP<br>①状态表达。f(i)为前f(i-1)和f(i-2)之和。<br>②状态转移。f(n) = f(n-1)+f(n-2)。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方法一：递归</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">elif</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>fib<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>fib<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方法二：递推</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">elif</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            t <span class="token operator">=</span> a<span class="token operator">+</span>b            a <span class="token operator">=</span> b            b <span class="token operator">=</span> t        <span class="token keyword">return</span> t <span class="token operator">%</span> <span class="token number">1000000007</span>solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>fib<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读研</title>
      <link href="2021/04/27/du-yan/"/>
      <url>2021/04/27/du-yan/</url>
      
        <content type="html"><![CDATA[<p>考研和年龄关系不是很密切，应该把考研视为终身学习的一部分。哪怕是你不考研也是要学习，考研只是一种比较全面、集中的一种学习方式。</p><h2 id="《走在自己的时区里》"><a href="#《走在自己的时区里》" class="headerlink" title="《走在自己的时区里》"></a>《走在自己的时区里》</h2><p>在时间上，纽约走在加州前面三个小时，</p><p>New York is 3 hours ahead of California,</p><p>但加州并没有变慢。</p><p>but it does not make California slow.</p><p>有人22岁就毕业了，</p><p>Someone graduated at the age of 22,</p><p>但等了五年才找到好工作！</p><p>but waited 5 years before securing a good job!</p><p>有人25岁就当上了CEO，</p><p>Someone became a CEO at 25,</p><p>却在50岁去世了。</p><p>and died at 50.</p><p>也有人直到50岁才当上CEO，</p><p>While another became a CEO at 50,</p><p>最后活到90岁。</p><p>and lived to 90 years.</p><p>有人依然单身，</p><p>Someone is still single,</p><p>而别人却早已结婚。</p><p>while someone else got married.</p><p>奥巴马55岁退任总统，</p><p>Obama retires at 55,</p><p>而川普却是70岁才开始当。</p><p>but Trump starts at 70.</p><p>世上每个人都有自己的发展时区。</p><p>Absolutely everyone in this world works based on their Time Zone.</p><p>身边有些人看似走在你前面，</p><p>People around you might seem to go ahead of you,</p><p>也有人看似走在你后面。</p><p>some might seem to be behind you.</p><p>但其实每个人在自己的时区有自己的步程。</p><p>But everyone is running their own RACE, in their own TIME.</p><p>不用嫉妒或嘲笑他们。</p><p>Don’t envy them or mock them.</p><p>他们都在各自的时区，你在你的！</p><p>They are in their TIME ZONE, and you are in yours!</p><p>所以，别放弃。</p><p>So, Never Give up</p><p>你没有落后，</p><p>You’re not LATE.</p><p>你没有领先。</p><p>You’re not EARLY.</p><p>在命运为你安排的属于你自己的时区里，一切都非常准时。</p><p>You are very much ON TIME, and in your TIME ZONE Destiny set up for you.</p><p>再好，别忘了危机与奋斗，</p><p>Keep fighting and stay alert, no matter how good;</p><p>再难，别忘了梦想与坚持，</p><p>Keep dreaming and carry on, no matter how hard;</p><p>再忙，别忘了读书与锻炼，</p><p>Keep reading and exercising, no matter how busy;</p><p>人生，就是一场长跑。</p><p>Life is a long run.</p>]]></content>
      
      
      <categories>
          
          <category> 人生感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法经典题</title>
      <link href="2021/04/23/shu-ju-jie-gou-yu-suan-fa-jing-dian-ti/"/>
      <url>2021/04/23/shu-ju-jie-gou-yu-suan-fa-jing-dian-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="1-基础算法"><a href="#1-基础算法" class="headerlink" title="1. 基础算法"></a>1. 基础算法</h2><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><table><thead><tr><th align="center">Alg</th><th align="center">思想</th><th align="center">时间复杂度</th><th align="center">-</th></tr></thead><tbody><tr><td align="center"><strong>剑指 Offer 05. 替换空格</strong></td><td align="center">双指针。先利用空格数量开辟空间，然后根据双指针所指的元素从后向前进行替换操作。</td><td align="center">$O(n)$</td><td align="center">-</td></tr></tbody></table><h5 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h5><table><thead><tr><th align="center">Alg</th><th align="center">思想</th><th align="center">时间复杂度</th><th align="center">-</th></tr></thead><tbody><tr><td align="center"><strong>剑指 Offer 06. 从尾到头打印链表</strong></td><td align="center">递归。先访问每一个节点，然后将节点添加到结果数组中。</td><td align="center">-</td><td align="center">-</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>传统机器学习模型的可解释性</title>
      <link href="2021/04/23/chuan-tong-ji-qi-xue-xi-mo-xing-de-ke-jie-shi-xing/"/>
      <url>2021/04/23/chuan-tong-ji-qi-xue-xi-mo-xing-de-ke-jie-shi-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="传统模型的可解释性"><a href="#传统模型的可解释性" class="headerlink" title="传统模型的可解释性"></a>传统模型的可解释性</h2><p>本章会涉及到的主题</p><ul><li>回顾传统的模型解释方法</li><li>了解传统模型解释方法的局限性</li><li>研究内在可解释的白盒模型</li><li>如何权衡性能和可解释性</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>想象一下，你作为一个数据科学顾问，在一个美国航空公司任职，现在正在观察导通时间表现（OTP）。OTP是航班准时的公认关键绩效指标。它以占在预定抵达时间的15分钟内到达。事实证明，机管局连续3年实现了超过80％的OTP，这已经可以接受，并且比以前要好得多，但是它们仍然是世界第9位和北美第5位。为了在明年的广告中吹牛，他们渴望至少在2019年取得北美第一，击败最大的竞争对手。</p><p>你的任务是创建可预测国内航班延误的模型。他们希望从模型中获得以下收益：</p><ul><li>了解影响国内到达的哪些因素在2018年造成的延误最大。</li><li>预计航空公司在半空中所造成的延误会足够准确，以缓解2019年其中的一些因素。</li></ul><p>航空公司高管告诉您，目前，航空公司对预测由于无法控制的事件（例如极端天气，安全事件和空中交通管制问题）而导致的延误并不感兴趣。他们也对使用同一架飞机的先前航班迟到而造成的延误不感兴趣，因为这不是根本原因。尽管如此，他们仍然想知道繁忙的枢纽对可避免的延误的影响，即使这与拥挤有关，因为毕竟毕竟他们可能与航班时刻表或飞行速度甚至登机口选择有关。尽管他们了解国际航班偶尔会影响国内航班，但他们希望首先解决庞大的本地市场。</p><p>高管有为您提供了美国运输部运输统计局提供的所有2018年AA国内航班的数据集。</p><p>经过仔细考虑，您已决定将此作为回归问题和分类问题进行处理。因此，您将生成预测延迟时间的模型以及对航班是否延迟超过15分钟进行分类的模型。对于解释，同时使用这两种方法将使您能够使用多种方法，并相应地扩展您的解释。同样，降维只能进一步丰富解释的可能性。因此，我们将通过以下步骤来处理此示例：</p><ol><li>使用各种回归方法预测延迟的分钟数</li><li>使用各种分类方法将航班分为延迟或不延迟</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">import</span> math<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> machine_learning_datasets <span class="token keyword">as</span> mldatasets<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>pipeline <span class="token keyword">import</span> make_pipeline<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> PolynomialFeatures<span class="token punctuation">,</span> StandardScaler<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> metrics<span class="token punctuation">,</span> linear_model<span class="token punctuation">,</span> tree<span class="token punctuation">,</span> naive_bayes<span class="token punctuation">,</span> neighbors<span class="token punctuation">,</span> ensemble<span class="token punctuation">,</span>\                    neural_network<span class="token punctuation">,</span> svm<span class="token punctuation">,</span> decomposition<span class="token punctuation">,</span> manifold<span class="token keyword">from</span> rulefit <span class="token keyword">import</span> RuleFit<span class="token keyword">import</span> statsmodels<span class="token punctuation">.</span>api <span class="token keyword">as</span> smaad18_df <span class="token operator">=</span> mldatasets<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"aa-domestic-delays-2018"</span><span class="token punctuation">)</span>aad18_df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>一般特征</p><ul><li>FL_NUM： 航班号</li><li>ORIGIN：起始机场代码（IATA）</li><li>DEST：目的地机场代码（IATA）</li></ul><p>出发特征</p><ul><li>PLANNED_DEP_DATETIME：航班的计划日期和时间。</li><li>CRS_DEP_TIME：计划的出发时间。</li><li>DEP_TIME：实际出发时间。</li><li>DEP_AFPH：在计划与实际从始发机场起飞之间的时间间隔内，每小时发生的实际飞行数量（以30分钟为间隔）。该功能告诉您起飞时始发机场有多忙。</li><li>DEP_RFPH：每小时离港相对航班数是指每小时的实际飞行次数与一天中的某天，一周中的某天以及一年中某月在始发机场所发生的每小时平均飞行数量之比。该功能将告诉您如何比较起源机场繁忙程度在起飞过程中。</li><li>TAXI_OUT：从始发机场登机口离开并离开车轮之间经过的时间。</li><li>WHEELS_OFF：飞机的轮子离开地面的时间点。</li></ul><p>机上特征</p><ul><li>CRS_ELAPSED_TIME：飞行所需的计划时间。</li><li>PCT_ELAPSED_TIME：实际飞行时间与计划飞行时间之比，以衡量飞机的相对速度。</li><li>DISTANCE：两个机场之间的距离。</li></ul><p>到达特征</p><ul><li>CRS_ARR_TIME：计划的到达时间。</li><li>ARR_AFPH：在计划到达目的地机场的实际时间与实际到达时间之间的时间间隔内每小时发生的实际飞行数量（以30分钟为间隔）。该功能告诉您目标机场在着陆期间有多忙。</li><li>ARR_RFPH：每小时到达的相对航班数是每小时的实际航班数与一天中的某天，一周中的某天以及一年中某月在目标机场发生的每小时中值航班数的比率。该功能将告诉您如何比较目的地机场繁忙程度在着陆过程中。</li></ul><p>延迟特征</p><ul><li><p>DEP_DELAY：出发的总延迟时间（以分钟为单位）。</p></li><li><p>ARR_DELAY：以分钟为单位的总到达时间可以细分为以下任意一项或全部：</p></li><li><p>a）CARRIER_DELAY：分钟延迟是由航空公司控制范围内的情况造成的（例如，维护或机组人员问题，飞机清洁，行李装载，加油等）。</p></li><li><p>b）WEATHER_DELAY：由于重要的气象条件（实际或预测）而导致的分钟延迟。</p></li><li><p>c）NAS_DELAY：国家航空系统规定的延迟时间，例如非极端天气情况，机场运营，繁忙的交通量和空中交通管制。</p></li><li><p>d）SECURITY_DELAY：由于疏散航站楼或大厅，由于安全漏洞，检查设备故障或检查区域中超过29分钟的较长线路而导致飞机重新登机而导致的延迟时间（以分钟为单位）。</p></li><li><p>e）LATE_AIRCRAFT_DELAY：分钟延迟是由于前一班飞机晚点到达而造成的。</p></li></ul><h5 id="特征预处理"><a href="#特征预处理" class="headerlink" title="特征预处理"></a>特征预处理</h5><pre class=" language-python"><code class="language-python">aad18_df<span class="token punctuation">[</span><span class="token string">'PLANNED_DEP_DATETIME'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>aad18_df<span class="token punctuation">[</span><span class="token string">'PLANNED_DEP_DATETIME'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 日期特征，星期和月份对航班的延误不利</span>aad18_df<span class="token punctuation">[</span><span class="token string">'DEP_MONTH'</span><span class="token punctuation">]</span> <span class="token operator">=</span> aad18_df<span class="token punctuation">[</span><span class="token string">'PLANNED_DEP_DATETIME'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>monthaad18_df<span class="token punctuation">[</span><span class="token string">'DEP_DOW'</span><span class="token punctuation">]</span> <span class="token operator">=</span> aad18_df<span class="token punctuation">[</span><span class="token string">'PLANNED_DEP_DATETIME'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>dayofweekaad18_df <span class="token operator">=</span> aad18_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'PLANNED_DEP_DATETIME'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 记录机场的出发地和目的地是否是枢纽</span>hubs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'CLT'</span><span class="token punctuation">,</span> <span class="token string">'ORD'</span><span class="token punctuation">,</span> <span class="token string">'DFW'</span><span class="token punctuation">,</span> <span class="token string">'LAX'</span><span class="token punctuation">,</span> <span class="token string">'MIA'</span><span class="token punctuation">,</span> <span class="token string">'JFK'</span><span class="token punctuation">,</span> <span class="token string">'LGA'</span><span class="token punctuation">,</span> <span class="token string">'PHL'</span><span class="token punctuation">,</span> <span class="token string">'PHX'</span><span class="token punctuation">,</span> <span class="token string">'DCA'</span><span class="token punctuation">]</span>is_origin_hub <span class="token operator">=</span> aad18_df<span class="token punctuation">[</span><span class="token string">'ORIGIN'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>hubs<span class="token punctuation">)</span>is_dest_hub <span class="token operator">=</span> aad18_df<span class="token punctuation">[</span><span class="token string">'DEST'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>hubs<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#Use boolean series to set ORIGIN_HUB and DEST_HUB</span>aad18_df<span class="token punctuation">[</span><span class="token string">'ORIGIN_HUB'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>aad18_df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>is_origin_hub<span class="token punctuation">,</span> <span class="token string">'ORIGIN_HUB'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>aad18_df<span class="token punctuation">[</span><span class="token string">'DEST_HUB'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>aad18_df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>is_dest_hub<span class="token punctuation">,</span> <span class="token string">'DEST_HUB'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">#Drop columns with codes</span>aad18_df <span class="token operator">=</span> aad18_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'FL_NUM'</span><span class="token punctuation">,</span> <span class="token string">'ORIGIN'</span><span class="token punctuation">,</span> <span class="token string">'DEST'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删除延迟时间</span>aad18_df <span class="token operator">=</span> aad18_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'ARR_DELAY'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建标签</span>y <span class="token operator">=</span> aad18_df<span class="token punctuation">[</span><span class="token string">'CARRIER_DELAY'</span><span class="token punctuation">]</span>X <span class="token operator">=</span> aad18_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'CARRIER_DELAY'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train_reg<span class="token punctuation">,</span> y_test_reg <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span>\y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.15</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">2014</span><span class="token punctuation">)</span>y_train_class <span class="token operator">=</span> y_train_reg<span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">15</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span>y_test_class <span class="token operator">=</span> y_test_reg<span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">15</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'aad18_df.shape: '</span><span class="token punctuation">,</span> aad18_df<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>aad18_df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/04/23/chuan-tong-ji-qi-xue-xi-mo-xing-de-ke-jie-shi-xing/2.png" alt="2"></p><p>检查特征和标签之间的线性关系。我们计算了皮尔逊相关系数，对系数求绝对值（我们不关心是正相关还是负相关），然后降序排列。</p><pre class=" language-python"><code class="language-python">corr <span class="token operator">=</span> aad18_df<span class="token punctuation">.</span>corr<span class="token punctuation">(</span><span class="token punctuation">)</span>abs<span class="token punctuation">(</span>corr<span class="token punctuation">[</span><span class="token string">'CARRIER_DELAY'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/04/23/chuan-tong-ji-qi-xue-xi-mo-xing-de-ke-jie-shi-xing/3.png" alt="3"></p><p>可以看出在一对一的特征相关中，只有DEP_DELAY与CARRIER_DELAY是高度相关。其他特征可能与标签有非线性关系，也可能多个特征才会给标签产生影响。</p><h2 id="回顾传统的模型解释方法"><a href="#回顾传统的模型解释方法" class="headerlink" title="回顾传统的模型解释方法"></a>回顾传统的模型解释方法</h2><h5 id="使用回归方法预测延迟的分钟数"><a href="#使用回归方法预测延迟的分钟数" class="headerlink" title="使用回归方法预测延迟的分钟数"></a>使用回归方法预测延迟的分钟数</h5><ul><li>linear 线性回归是我们要讨论的第一类模型。我们对数据做了假设，y是X特征的线性组合的同时也限制了发现特征间非线性关系和特征组合的能力。</li><li>linear_poly 多项式回归通过添加多项式特征来扩展线性回归。若degree=2，则多项式为二次幂。这意味着，除了所有特征的单项形式之外（DEP_FPH），还需具有二次形式的特征（例如$DEP_FPH^{2}$），以及所有21个特征的组合项，例如：DEP_FPH&amp;DISTANCE, DEP_FPH&amp;DELA。</li><li>linear_interact 类似多项式回归，但没有二次项。如同interaction_only=True，只有组合特征。这很有用，因为不能证明任何特征都适合二次项，某些特征之间需要相互组合才能产生影响。</li><li>ridge 岭回归是一种线性回归。随着数据特征数量的增加，线性回归存在过度拟合的可能。这时需要通过正则化的方式降低过拟合现象。</li><li>decsion_tree 自上而下的建立一颗树结构来进行决策，每一个叶子都是一个类，每一个非叶子节点都是一条规则。</li><li>rule_fit 将带正则化的线性回归扩展为包含特征规则的线性回归。这些规则是通过遍历决策树形成，丢弃树结构中的叶子结点，保留决策规则。它使用Lasso Regression，筛选掉无用的特征。</li><li>knn 基于局部假设，即彼此接近的数据点是相似的。</li><li>random_forest 应用bagging思想，随机选择特征和样本训练多颗决策树。</li></ul><pre class=" language-python"><code class="language-python">rand_seed <span class="token operator">=</span> <span class="token number">1024</span>reg_model_dict <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'linear'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'model'</span><span class="token punctuation">:</span> linear_model<span class="token punctuation">.</span>LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'linear_poly'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'model'</span><span class="token punctuation">:</span> make_pipeline<span class="token punctuation">(</span>        PolynomialFeatures<span class="token punctuation">(</span>degree<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        linear_model<span class="token punctuation">.</span>LinearRegression<span class="token punctuation">(</span>fit_intercept<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'linear_interact'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'model'</span><span class="token punctuation">:</span> make_pipeline<span class="token punctuation">(</span>            PolynomialFeatures<span class="token punctuation">(</span>interaction_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            linear_model<span class="token punctuation">.</span>LinearRegression<span class="token punctuation">(</span>fit_intercept<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'ridge'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'model'</span><span class="token punctuation">:</span> linear_model<span class="token punctuation">.</span>RidgeCV<span class="token punctuation">(</span>alphas<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'decision_tree'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'model'</span><span class="token punctuation">:</span> tree<span class="token punctuation">.</span>DecisionTreeRegressor<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span>rand_seed<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'rulefit'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'model'</span><span class="token punctuation">:</span> RuleFit<span class="token punctuation">(</span>max_rules<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">,</span> rfmode<span class="token operator">=</span><span class="token string">'regress'</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span>rand_seed<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'knn'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'model'</span><span class="token punctuation">:</span> neighbors<span class="token punctuation">.</span>KNeighborsRegressor<span class="token punctuation">(</span>n_neighbors<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'random_forest'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'model'</span><span class="token punctuation">:</span> ensemble<span class="token punctuation">.</span>RandomForestRegressor<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span>rand_seed<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'mlp'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'model'</span><span class="token punctuation">:</span> make_pipeline<span class="token punctuation">(</span>StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                neural_network<span class="token punctuation">.</span>MLPClassifier<span class="token punctuation">(</span>hidden_layer_sizes<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                            max_iter<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span>                                                             early_stopping<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                                             random_state<span class="token operator">=</span>rand_seed<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> model_name <span class="token keyword">in</span> reg_model_dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'model_name: '</span><span class="token punctuation">,</span> model_name<span class="token punctuation">)</span>    <span class="token keyword">if</span> model_name <span class="token operator">==</span> <span class="token string">'rulefit'</span><span class="token punctuation">:</span>         model <span class="token operator">=</span> reg_model_dict<span class="token punctuation">[</span>model_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'model'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">.</span>values<span class="token punctuation">,</span> y_train_reg<span class="token punctuation">.</span>values<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> reg_model_dict<span class="token punctuation">[</span>model_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'model'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train_reg<span class="token punctuation">)</span>    y_train_pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_train<span class="token punctuation">.</span>values<span class="token punctuation">)</span>    y_test_pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">.</span>values<span class="token punctuation">)</span>    reg_model_dict<span class="token punctuation">[</span>model_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'fitted'</span><span class="token punctuation">]</span> <span class="token operator">=</span> model    reg_model_dict<span class="token punctuation">[</span>model_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'preds'</span><span class="token punctuation">]</span> <span class="token operator">=</span> y_test_pred    reg_model_dict<span class="token punctuation">[</span>model_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'RMSE_train'</span><span class="token punctuation">]</span> <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>metrics<span class="token punctuation">.</span>mean_squared_error<span class="token punctuation">(</span>y_train_reg<span class="token punctuation">,</span> y_train_pred<span class="token punctuation">)</span><span class="token punctuation">)</span>    reg_model_dict<span class="token punctuation">[</span>model_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'RMSE_test'</span><span class="token punctuation">]</span> <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>metrics<span class="token punctuation">.</span>mean_squared_error<span class="token punctuation">(</span>y_test_reg<span class="token punctuation">,</span> y_test_pred<span class="token punctuation">)</span><span class="token punctuation">)</span>    reg_model_dict<span class="token punctuation">[</span>model_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'R2_test'</span><span class="token punctuation">]</span> <span class="token operator">=</span> metrics<span class="token punctuation">.</span>r2_score<span class="token punctuation">(</span>y_test_reg<span class="token punctuation">,</span> y_test_pred<span class="token punctuation">)</span>reg_metrics <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">.</span>from_dict<span class="token punctuation">(</span>reg_model_dict<span class="token punctuation">,</span> <span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'RMSE_train'</span><span class="token punctuation">,</span> <span class="token string">'RMSE_test'</span><span class="token punctuation">,</span> <span class="token string">'R2_test'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>reg_metrics<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'RMSE_test'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>\    background_gradient<span class="token punctuation">(</span>cmap<span class="token operator">=</span><span class="token string">'viridis'</span><span class="token punctuation">,</span> low<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> high<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'RMSE_train'</span><span class="token punctuation">,</span> <span class="token string">'RMSE_test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\    background_gradient<span class="token punctuation">(</span>cmap<span class="token operator">=</span><span class="token string">'plasma'</span><span class="token punctuation">,</span> low<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> high<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'R2_test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/04/23/chuan-tong-ji-qi-xue-xi-mo-xing-de-ke-jie-shi-xing/4.png" alt="4"></p><h5 id="使用分类方法预测是否发生延迟"><a href="#使用分类方法预测是否发生延迟" class="headerlink" title="使用分类方法预测是否发生延迟"></a>使用分类方法预测是否发生延迟</h5><pre class=" language-python"><code class="language-python">rand_seed <span class="token operator">=</span> <span class="token number">1024</span>class_model_dict <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># Generalized Linear Models (GLMs)</span>    <span class="token string">'logistic'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'model'</span><span class="token punctuation">:</span> linear_model<span class="token punctuation">.</span>LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'ridge'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'model'</span><span class="token punctuation">:</span> linear_model<span class="token punctuation">.</span>RidgeClassifierCV<span class="token punctuation">(</span>cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>                                        alphas<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                        class_weight<span class="token operator">=</span><span class="token string">'balanced'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># Tree</span>    <span class="token string">'decision_tree'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'model'</span><span class="token punctuation">:</span> tree<span class="token punctuation">.</span>DecisionTreeClassifier<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span>rand_seed<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true"># Nearest Neighbors</span>    <span class="token string">'knn'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'model'</span><span class="token punctuation">:</span> neighbors<span class="token punctuation">.</span>KNeighborsClassifier<span class="token punctuation">(</span>n_neighbors<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># Naive Bayes</span>    <span class="token string">'naive_bayes'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'model'</span><span class="token punctuation">:</span> naive_bayes<span class="token punctuation">.</span>GaussianNB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># Ensemble Methods</span>    <span class="token string">'gradient_boosting'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'model'</span><span class="token punctuation">:</span>ensemble<span class="token punctuation">.</span>GradientBoostingClassifier<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">210</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'random_forest'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'model'</span><span class="token punctuation">:</span>ensemble<span class="token punctuation">.</span>RandomForestClassifier<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>                                                              class_weight<span class="token operator">=</span><span class="token string">'balanced'</span><span class="token punctuation">,</span>                                                              random_state<span class="token operator">=</span>rand_seed<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># Neural Networks</span>    <span class="token comment" spellcheck="true">#     'mlp':{'model': </span>    <span class="token comment" spellcheck="true">#            make_pipeline(</span>    <span class="token comment" spellcheck="true">#                StandardScaler(), neural_network. MLPClassifier(hidden_layer_sizes=(7,),max_iter=500, early_stopping=True,random_state=rand_seed)</span>    <span class="token comment" spellcheck="true">#            )</span>    <span class="token comment" spellcheck="true">#           }</span> <span class="token punctuation">}</span><span class="token keyword">for</span> model_name <span class="token keyword">in</span> class_model_dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    fitted_model <span class="token operator">=</span> class_model_dict<span class="token punctuation">[</span>model_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'model'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train_class<span class="token punctuation">)</span>    y_train_pred <span class="token operator">=</span> fitted_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_train<span class="token punctuation">.</span>values<span class="token punctuation">)</span>    <span class="token keyword">if</span> model_name <span class="token operator">==</span> <span class="token string">'ridge'</span><span class="token punctuation">:</span>        y_test_pred <span class="token operator">=</span> fitted_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">.</span>values<span class="token punctuation">)</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>        y_test_prob <span class="token operator">=</span> fitted_model<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>X_test<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>        y_test_pred <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>y_test_prob <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    class_model_dict<span class="token punctuation">[</span>model_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'fitted'</span><span class="token punctuation">]</span> <span class="token operator">=</span> fitted_model    class_model_dict<span class="token punctuation">[</span>model_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'probs'</span><span class="token punctuation">]</span> <span class="token operator">=</span> y_test_prob    class_model_dict<span class="token punctuation">[</span>model_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'preds'</span><span class="token punctuation">]</span> <span class="token operator">=</span> y_test_pred    class_model_dict<span class="token punctuation">[</span>model_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Accuracy_train'</span><span class="token punctuation">]</span> <span class="token operator">=</span> metrics<span class="token punctuation">.</span>accuracy_score<span class="token punctuation">(</span>y_train_class<span class="token punctuation">,</span> y_train_pred<span class="token punctuation">)</span>    class_model_dict<span class="token punctuation">[</span>model_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Accuracy_test'</span><span class="token punctuation">]</span> <span class="token operator">=</span> metrics<span class="token punctuation">.</span>accuracy_score<span class="token punctuation">(</span>y_test_class<span class="token punctuation">,</span> y_test_pred<span class="token punctuation">)</span>    class_model_dict<span class="token punctuation">[</span>model_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Recall_train'</span><span class="token punctuation">]</span> <span class="token operator">=</span> metrics<span class="token punctuation">.</span>recall_score<span class="token punctuation">(</span>y_train_class<span class="token punctuation">,</span> y_train_pred<span class="token punctuation">)</span>    class_model_dict<span class="token punctuation">[</span>model_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Recall_test'</span><span class="token punctuation">]</span> <span class="token operator">=</span> metrics<span class="token punctuation">.</span>recall_score<span class="token punctuation">(</span>y_test_class<span class="token punctuation">,</span> y_test_pred<span class="token punctuation">)</span>    <span class="token keyword">if</span> model_name <span class="token operator">!=</span> <span class="token string">'ridge'</span><span class="token punctuation">:</span>        class_model_dict<span class="token punctuation">[</span>model_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ROC_AUC_test'</span><span class="token punctuation">]</span> <span class="token operator">=</span> metrics<span class="token punctuation">.</span>roc_auc_score<span class="token punctuation">(</span>y_test_class<span class="token punctuation">,</span> y_test_prob<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        class_model_dict<span class="token punctuation">[</span>model_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ROC_AUC_test'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    class_model_dict<span class="token punctuation">[</span>model_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'F1_test'</span><span class="token punctuation">]</span> <span class="token operator">=</span> metrics<span class="token punctuation">.</span>f1_score<span class="token punctuation">(</span>y_test_class<span class="token punctuation">,</span> y_test_pred<span class="token punctuation">)</span>    class_model_dict<span class="token punctuation">[</span>model_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'MCC_test'</span><span class="token punctuation">]</span> <span class="token operator">=</span> metrics<span class="token punctuation">.</span>matthews_corrcoef<span class="token punctuation">(</span>y_test_class<span class="token punctuation">,</span> y_test_pred<span class="token punctuation">)</span>    class_metrics <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">.</span>from_dict<span class="token punctuation">(</span>class_model_dict<span class="token punctuation">,</span> <span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Accuracy_train'</span><span class="token punctuation">,</span> <span class="token string">'Accuracy_test'</span><span class="token punctuation">,</span> <span class="token string">'Recall_train'</span><span class="token punctuation">,</span> <span class="token string">'Recall_test'</span><span class="token punctuation">,</span><span class="token string">'ROC_AUC_test'</span><span class="token punctuation">,</span> <span class="token string">'F1_test'</span><span class="token punctuation">,</span> <span class="token string">'MCC_test'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>class_metrics<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'ROC_AUC_test'</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background_gradient<span class="token punctuation">(</span>cmap<span class="token operator">=</span><span class="token string">'plasma'</span><span class="token punctuation">,</span> low<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> high<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                   subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Accuracy_train'</span><span class="token punctuation">,</span> <span class="token string">'Accuracy_test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\background_gradient<span class="token punctuation">(</span>cmap<span class="token operator">=</span><span class="token string">'viridis'</span><span class="token punctuation">,</span> low<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> high<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span>\                    subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Recall_train'</span><span class="token punctuation">,</span> <span class="token string">'Recall_test'</span><span class="token punctuation">,</span>\                        <span class="token string">'ROC_AUC_test'</span><span class="token punctuation">,</span> <span class="token string">'F1_test'</span><span class="token punctuation">,</span> <span class="token string">'MCC_test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/04/23/chuan-tong-ji-qi-xue-xi-mo-xing-de-ke-jie-shi-xing/5.png" alt="5"></p><h2 id="广义线性模型GLM"><a href="#广义线性模型GLM" class="headerlink" title="广义线性模型GLM"></a>广义线性模型GLM</h2><p>GLM是一大类模型类，每个模型都有针对各种统计分布的模型。比如线性回归假设目标特征和残差具有正态分布，逻辑回归服从伯努利分布，Poisson分布的Poisson回归和多项式分布的多项式回归。您可以根据目标变量的分布以及数据是否符合GLM的其他假设来选择使用GLM。所有，GLM共享一个简单公式，即线性预测函数。</p><p>$y^{-}=βX$</p><h5 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h5><p>多元线性回归方程为</p><p>$y^{-}=β_{0} + β_{1}X_{1} + β_{2}X_{2}… + β_{n}X_{n}$</p><p>在线性代数，可以表示为矩阵乘法</p><p>$y^{-}=βX$</p><p>根据OLS，可以得到每个特征前的系数，以及各个系数的置信区间。模型的正确性取决于输入数据是否满足：线性、正态性、独立性、缺乏多重共线性、均方差。<br>多重共线性是可取的。否则，系数将不准确。当特征间高度相关时，会发生多重共线性。可以通过相关矩阵，公差度量或方差膨胀因子VIF进行测试，并通过删除高度相关的特征之一进行修复。</p><h5 id="线性回归的可解释性"><a href="#线性回归的可解释性" class="headerlink" title="线性回归的可解释性"></a>线性回归的可解释性</h5><p>如何解释线性回归模型呢？只需要系数和截距即可。</p><pre class=" language-python"><code class="language-python">lr_coef <span class="token operator">=</span> reg_model_dict<span class="token punctuation">[</span><span class="token string">'linear'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'model'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>coef_lr_intercept <span class="token operator">=</span> reg_model_dict<span class="token punctuation">[</span><span class="token string">'linear'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'model'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>intercept_<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'lr_coef: '</span><span class="token punctuation">,</span> lr_coef<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'lr_intercept: '</span><span class="token punctuation">,</span> lr_intercept<span class="token punctuation">)</span>coef_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'feature'</span><span class="token punctuation">:</span>X_train<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>values<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'coef'</span><span class="token punctuation">:</span> lr_coef<span class="token punctuation">}</span><span class="token punctuation">)</span>coef_df</code></pre><p><img src="/2021/04/23/chuan-tong-ji-qi-xue-xi-mo-xing-de-ke-jie-shi-xing/6.png" alt="6"></p><p>类似线性回归，带有延迟的特征排名很高。</p><h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h2><p>决策树有很多种，大多数决策树算法并不容易解释（比如采用了集成学习的随机森林、GBDT）。简单的分类和回归树很适合挖掘一些组合特征。</p><h5 id="CART决策树"><a href="#CART决策树" class="headerlink" title="CART决策树"></a>CART决策树</h5><p>在大多数情况下，分类和回归树（CART）是首选的简介的决策树。它是一个白盒模型，因为可以用数学公式表示，可视化并打印为一组规则，这些规则划分正负样本到叶子节点。CART数使用Gini系数来作为划分依据。</p><h5 id="CART决策树的可解释性"><a href="#CART决策树的可解释性" class="headerlink" title="CART决策树的可解释性"></a>CART决策树的可解释性</h5><p>决策树可以在视觉上全局和局部的解释。这里建立最大深度为2的树。（深度超过3和4时，可视化就会变得复杂）。</p><pre class=" language-python"><code class="language-python">fig<span class="token punctuation">,</span> axes <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> ncols <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\                         figsize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">600</span><span class="token punctuation">)</span>tree<span class="token punctuation">.</span>plot_tree<span class="token punctuation">(</span>class_model_dict<span class="token punctuation">[</span><span class="token string">'decision_tree'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'fitted'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\             feature_names<span class="token operator">=</span>X_train<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>values<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\               filled <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> max_depth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/04/23/chuan-tong-ji-qi-xue-xi-mo-xing-de-ke-jie-shi-xing/7.png" alt="7"></p><p>还有一种方法可以更好的可视化决策树，同时也省略了一些细节（基尼系数和样本大小），打印每个分支和节点的类中做出的决策。</p><pre class=" language-python"><code class="language-python">text_tree <span class="token operator">=</span> tree<span class="token punctuation">.</span>\            export_text<span class="token punctuation">(</span>class_model_dict<span class="token punctuation">[</span><span class="token string">'decision_tree'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'fitted'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> feature_names<span class="token operator">=</span>X_train<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>values<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>text_tree<span class="token punctuation">)</span></code></pre><p><img src="/2021/04/23/chuan-tong-ji-qi-xue-xi-mo-xing-de-ke-jie-shi-xing/8.png" alt="8"></p><h5 id="决策树的特征重要度"><a href="#决策树的特征重要度" class="headerlink" title="决策树的特征重要度"></a>决策树的特征重要度</h5><p>计算决策树的特征重要度非常容易。某些特征在决策树中出现的频率很高，但和他们之前的节点相比，其权重取决于他们对Gini指数总体下降的贡献程度。特征重要度是记录每个特征在所有基尼指数相对减少总和的贡献百分比。</p><pre class=" language-python"><code class="language-python">dt_imp_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'feature'</span><span class="token punctuation">:</span>X_train<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>values<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'importance'</span><span class="token punctuation">:</span> class_model_dict<span class="token punctuation">[</span><span class="token string">'decision_tree'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'fitted'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>\                       feature_importances_<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\          sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'importance'</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>dt_imp_df</code></pre><p><img src="/2021/04/23/chuan-tong-ji-qi-xue-xi-mo-xing-de-ke-jie-shi-xing/9.png" alt="9"></p><h2 id="权衡性能和可解释性"><a href="#权衡性能和可解释性" class="headerlink" title="权衡性能和可解释性"></a>权衡性能和可解释性</h2><p>性能和可解释性的关系如下图所示，越复杂的模型性能越好，也越不可解释。</p><p><img src="/2021/04/23/chuan-tong-ji-qi-xue-xi-mo-xing-de-ke-jie-shi-xing/1.png" alt="1"></p>]]></content>
      
      
      <categories>
          
          <category> 可解释性机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可解释性机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习推荐系统实战之Spark特征工程</title>
      <link href="2021/04/13/shen-du-xue-xi-tui-jian-xi-tong-shi-zhan-zhi-spark-te-zheng-gong-cheng/"/>
      <url>2021/04/13/shen-du-xue-xi-tui-jian-xi-tong-shi-zhan-zhi-spark-te-zheng-gong-cheng/</url>
      
        <content type="html"><![CDATA[<p>日常学习中，我们常使用pandas进行数据预处理。但在真实工业环境海量数据条件下，pandas就无法满足大内存消耗能力。这时就需要使用spark进行离线特征工程来替代pandas操作。</p><p>特征工程中，常把数据字段类型分为两类。数值型产生dense feature，类别型产生sparse feature。</p><p>数值型（dense feature）</p><ol><li>归一化</li><li>分箱/桶</li></ol><p>类别型（sparse feature）</p><ol><li>oneHot</li><li>multiHot</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> findsparkfindspark<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span> pyspark <span class="token keyword">import</span> SparkConf<span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>sql <span class="token keyword">import</span> SparkSession<span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>ml <span class="token keyword">import</span> Pipeline<span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>sql <span class="token keyword">import</span> functions <span class="token keyword">as</span> F<span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>types <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>functions <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>ml<span class="token punctuation">.</span>linalg <span class="token keyword">import</span> VectorUDT<span class="token punctuation">,</span> Vectors<span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>ml<span class="token punctuation">.</span>feature <span class="token keyword">import</span> OneHotEncoder<span class="token punctuation">,</span> StringIndexer<span class="token punctuation">,</span> QuantileDiscretizer<span class="token punctuation">,</span> MinMaxScaler<span class="token comment" spellcheck="true"># 参数设置</span>ROOT_DIR <span class="token operator">=</span> <span class="token string">'file:///Users/xxx/WalleRecSys'</span><span class="token keyword">def</span> <span class="token function">parse_sparse_feature_onehot</span><span class="token punctuation">(</span>movie_df<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    稀疏特征onehot编码    :param movie_df:    :return:    """</span>    _movie_df <span class="token operator">=</span> movie_df<span class="token punctuation">.</span>withColumn<span class="token punctuation">(</span><span class="token string">"movieIdNumber"</span><span class="token punctuation">,</span> F<span class="token punctuation">.</span>col<span class="token punctuation">(</span><span class="token string">"movieId"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cast<span class="token punctuation">(</span>IntegerType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    encoder <span class="token operator">=</span> OneHotEncoder<span class="token punctuation">(</span>inputCol<span class="token operator">=</span><span class="token string">'movieIdNumber'</span><span class="token punctuation">,</span> outputCol<span class="token operator">=</span><span class="token string">'movieIdOneHot'</span><span class="token punctuation">,</span> dropLast<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    _sparse_df <span class="token operator">=</span> encoder<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>_movie_df<span class="token punctuation">)</span>    _sparse_df<span class="token punctuation">.</span>printSchema<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># movieIdNumber倒序展示</span>    _sparse_df<span class="token punctuation">.</span>orderBy<span class="token punctuation">(</span>desc<span class="token punctuation">(</span><span class="token string">"movieIdNumber"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">array_to_multi_vector</span><span class="token punctuation">(</span>genre_indexes<span class="token punctuation">,</span> index_size<span class="token punctuation">)</span><span class="token punctuation">:</span>    genre_indexes<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>    fill_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>genre_indexes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> Vectors<span class="token punctuation">.</span>sparse<span class="token punctuation">(</span>index_size<span class="token punctuation">,</span> genre_indexes<span class="token punctuation">,</span> fill_list<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">parse_sparse_feature_multihot</span><span class="token punctuation">(</span>movie_df<span class="token punctuation">)</span><span class="token punctuation">:</span>    _movie_df <span class="token operator">=</span> movie_df<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"movieId"</span><span class="token punctuation">,</span> <span class="token string">"title"</span><span class="token punctuation">,</span> explode<span class="token punctuation">(</span>        split<span class="token punctuation">(</span>F<span class="token punctuation">.</span>col<span class="token punctuation">(</span><span class="token string">"genres"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"\\|"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cast<span class="token punctuation">(</span>ArrayType<span class="token punctuation">(</span>StringType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span>alias<span class="token punctuation">(</span><span class="token string">'genre'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'multihot _movie_df: '</span><span class="token punctuation">)</span>    _movie_df<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># genre列进行Index编码并转化为Int类型</span>    string_index_model <span class="token operator">=</span> StringIndexer<span class="token punctuation">(</span>inputCol<span class="token operator">=</span><span class="token string">'genre'</span><span class="token punctuation">,</span> outputCol<span class="token operator">=</span><span class="token string">'genre_index'</span><span class="token punctuation">)</span>    genre_index_df <span class="token operator">=</span> string_index_model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>_movie_df<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">(</span>_movie_df<span class="token punctuation">)</span><span class="token punctuation">.</span>withColumn<span class="token punctuation">(</span>        <span class="token string">"genre_index_int"</span><span class="token punctuation">,</span> F<span class="token punctuation">.</span>col<span class="token punctuation">(</span><span class="token string">"genre_index"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cast<span class="token punctuation">(</span>IntegerType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    index_size <span class="token operator">=</span> genre_index_df<span class="token punctuation">.</span>agg<span class="token punctuation">(</span>max<span class="token punctuation">(</span>F<span class="token punctuation">.</span>col<span class="token punctuation">(</span><span class="token string">"genre_index_int"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>    _temp_movie_df <span class="token operator">=</span> genre_index_df<span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span><span class="token string">"movieId"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span>        F<span class="token punctuation">.</span>collect_list<span class="token punctuation">(</span><span class="token string">"genre_index_int"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>alias<span class="token punctuation">(</span><span class="token string">"genre_indexes"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span>withColumn<span class="token punctuation">(</span><span class="token string">"index_size"</span><span class="token punctuation">,</span> F<span class="token punctuation">.</span>lit<span class="token punctuation">(</span>index_size<span class="token punctuation">)</span><span class="token punctuation">)</span>    _sparse_df <span class="token operator">=</span> _temp_movie_df<span class="token punctuation">.</span>withColumn<span class="token punctuation">(</span><span class="token string">"multihot"</span><span class="token punctuation">,</span> udf<span class="token punctuation">(</span>array_to_multi_vector<span class="token punctuation">,</span> VectorUDT<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>F<span class="token punctuation">.</span>col<span class="token punctuation">(</span><span class="token string">"genre_indexes"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> F<span class="token punctuation">.</span>col<span class="token punctuation">(</span><span class="token string">"index_size"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'multihot_df: '</span><span class="token punctuation">)</span>    _sparse_df<span class="token punctuation">.</span>printSchema<span class="token punctuation">(</span><span class="token punctuation">)</span>    _sparse_df<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">parse_dense_feature</span><span class="token punctuation">(</span>rating_df<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" 分桶、归一化操作 """</span>    rating_df<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 计算rating均值和方差</span>    _rating_df <span class="token operator">=</span> rating_df<span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span><span class="token string">'movieId'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span>F<span class="token punctuation">.</span>count<span class="token punctuation">(</span>F<span class="token punctuation">.</span>lit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>alias<span class="token punctuation">(</span><span class="token string">'rating_count'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                  F<span class="token punctuation">.</span>avg<span class="token punctuation">(</span><span class="token string">'rating'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>alias<span class="token punctuation">(</span><span class="token string">'rating_avg'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                  F<span class="token punctuation">.</span>variance<span class="token punctuation">(</span><span class="token string">'rating'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>alias<span class="token punctuation">(</span><span class="token string">'rating_var'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> \        <span class="token punctuation">.</span>withColumn<span class="token punctuation">(</span><span class="token string">'rating_avg_vector'</span><span class="token punctuation">,</span> udf<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> Vectors<span class="token punctuation">.</span>dense<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> VectorUDT<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'rating_avg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    _rating_df<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 分桶bucketing</span>    rating_count_discretizer <span class="token operator">=</span> QuantileDiscretizer<span class="token punctuation">(</span>numBuckets<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> inputCol<span class="token operator">=</span><span class="token string">'rating_count'</span><span class="token punctuation">,</span> outputCol<span class="token operator">=</span><span class="token string">'rating_count_bucket'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 归一化normalization</span>    rating_scaler <span class="token operator">=</span> MinMaxScaler<span class="token punctuation">(</span>inputCol<span class="token operator">=</span><span class="token string">'rating_avg_vector'</span><span class="token punctuation">,</span> outputCol<span class="token operator">=</span><span class="token string">'rating_avg_vector_scaled'</span><span class="token punctuation">)</span>    pipeline_stages <span class="token operator">=</span> <span class="token punctuation">[</span>rating_count_discretizer<span class="token punctuation">,</span> rating_scaler<span class="token punctuation">]</span>    feature_pipeline <span class="token operator">=</span> Pipeline<span class="token punctuation">(</span>stages<span class="token operator">=</span>pipeline_stages<span class="token punctuation">)</span>    _dense_df <span class="token operator">=</span> feature_pipeline<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>_rating_df<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">(</span>_rating_df<span class="token punctuation">)</span>    _dense_df<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    conf <span class="token operator">=</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">'feature_engineering'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">'local'</span><span class="token punctuation">)</span>    spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>config<span class="token punctuation">(</span>conf<span class="token operator">=</span>conf<span class="token punctuation">)</span><span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>    movie_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>ROOT_DIR<span class="token punctuation">,</span> <span class="token string">'src/main/resources/webroot/ml1m/movies.csv'</span><span class="token punctuation">)</span>    movie_df <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'csv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">'header'</span><span class="token punctuation">,</span> <span class="token string">'true'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>load<span class="token punctuation">(</span>movie_path<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'movie_df: '</span><span class="token punctuation">)</span>    movie_df<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    movie_df<span class="token punctuation">.</span>printSchema<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 分类特征onehot编码示例</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'parse_sparse_feature_onehot: '</span><span class="token punctuation">)</span>    parse_sparse_feature_onehot<span class="token punctuation">(</span>movie_df<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 分类特征multihot编码示例</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'parse_sparse_feature_multihot: '</span><span class="token punctuation">)</span>    parse_sparse_feature_multihot<span class="token punctuation">(</span>movie_df<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 数值特征归一化、分桶示例</span>    rating_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>ROOT_DIR<span class="token punctuation">,</span> <span class="token string">'src/main/resources/webroot/ml1m/ratings.csv'</span><span class="token punctuation">)</span>    rating_df <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'csv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">'header'</span><span class="token punctuation">,</span> <span class="token string">'true'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>load<span class="token punctuation">(</span>rating_path<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'rating_df feature: '</span><span class="token punctuation">)</span>    parse_dense_feature<span class="token punctuation">(</span>rating_df<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 推荐算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习推荐系统实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习的可解释性</title>
      <link href="2021/04/08/ji-qi-xue-xi-de-ke-jie-shi-xing/"/>
      <url>2021/04/08/ji-qi-xue-xi-de-ke-jie-shi-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>翻译自Machine Learning Explainability <a href="https://www.kaggle.com/learn/machine-learning-explainability">https://www.kaggle.com/learn/machine-learning-explainability</a></p><p>想要理解一个模型，需要了解以下内容：</p><ol><li>模型中各个特征的重要度。</li><li>在每一次预估中，每个数据变量对预估结果的作用程度。</li><li>每个特征在参与大量数据的预估时所发挥的作用。</li></ol><h2 id="特征重要度"><a href="#特征重要度" class="headerlink" title="特征重要度"></a>特征重要度</h2><p>特征重要度常用来度量特征的重要程度。下面我们通过一个示例了解具体如何使用特征重要度。</p><p><img src="/2021/04/08/ji-qi-xue-xi-de-ke-jie-shi-xing/1.png" alt="1"></p><p>如上图，我们希望用10岁时的数据预测一个人在20岁时的身高。数据中既包括非常有用的特征（10岁时的身高），也包括基本无用的特征（是否拥有袜子）。那么，如果随机的对数据的某列进行混排，而保持目标和其他列不变，混排过程会如何影响数据预测的准确性？</p><p><img src="/2021/04/08/ji-qi-xue-xi-de-ke-jie-shi-xing/2.png" alt="2"></p><p>模型依赖于各列特征，则模型的准确性会受到影响，依赖性越大的列，准确性越受到影响。所以，混排10岁身高特征会带来可怕的预测，如果混排是否拥有袜子特征，则预测不会带来这么大的损失。</p><p>计算流程如下</p><ol><li>得到训练好的模型</li><li>使用混排某个列的数据集进行预测。然后，使用预测值和目标值计算损失函数的损失量。采用损失量衡量变量的重要性。</li><li>恢复数据并重复步骤2，直到计算出每一列的重要性为止。</li></ol><h5 id="ELI5"><a href="#ELI5" class="headerlink" title="ELI5"></a>ELI5</h5><p>ELI5是一个Python库，允许使用统一API可视化地调试各种机器学习模型。 它内置了对多个ML框架的支持，并提供了一种解释黑盒模型的方法。它有助于调试机器学习分类器并解释它们的预测。</p><p>它为以下机器学习框架和包提供支持：</p><ul><li>scikit-learn。目前，ELI5允许解释scikit-learning线性分类器和回归量的权重和预测，将决策树打印为文本或SVG，显示特征重要性并解释决策树和基于树的集合的预测。支持Pipeline和FeatureUnion。ELI5通过scikit-learn了解文本处理实用程序，并可相应地突出显示文本数据。它还允许通过撤消散列来调试包含HashingVectorizer的scikit-learn管道。</li><li>XGBoost  - 显示功能重要性并解释XGBClassifier，XGBRegressor和xgboost.Booster的预测。</li><li>LightGBM  - 显示功能重要性并解释LGBMClassifier和LGBMRegressor的预测。</li><li>lightning - 解释闪电分类器和回归量的权重和预测。</li><li>sklearn-crfsuite。 ELI5允许检查sklearn_crfsuite.CRF模型的权重。</li></ul><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p>使用模型根据足球统计数据预测某球员是否是球队的全场最佳球员。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> eli5<span class="token keyword">from</span> eli5<span class="token punctuation">.</span>sklearn <span class="token keyword">import</span> PermutationImportance<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifierdata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./input/FIFA 2018 Statistics.csv'</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'Man of the Match'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"Yes"</span><span class="token punctuation">)</span>feature_names <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">.</span>columns <span class="token keyword">if</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dtype <span class="token keyword">in</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>int64<span class="token punctuation">]</span><span class="token punctuation">]</span>X <span class="token operator">=</span> data<span class="token punctuation">[</span>feature_names<span class="token punctuation">]</span>train_X<span class="token punctuation">,</span> val_X<span class="token punctuation">,</span> train_y<span class="token punctuation">,</span> val_y <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>model <span class="token operator">=</span> RandomForestClassifier<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>                                  random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_X<span class="token punctuation">,</span> train_y<span class="token punctuation">)</span>p <span class="token operator">=</span> PermutationImportance<span class="token punctuation">(</span>model<span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>val_X<span class="token punctuation">,</span> val_y<span class="token punctuation">)</span>eli5<span class="token punctuation">.</span>show_weights<span class="token punctuation">(</span>p<span class="token punctuation">,</span> feature_names<span class="token operator">=</span>val_X<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/04/08/ji-qi-xue-xi-de-ke-jie-shi-xing/6.png" alt="6"></p><h5 id="解释特征重要性"><a href="#解释特征重要性" class="headerlink" title="解释特征重要性"></a>解释特征重要性</h5><p>每行的第一个数字代表，通过混排特征降低了多少模型性能。重要性有一定的随机性，正负值代表随机性变化。可以看出从上到下特征重要度依次递减，后面出现了负值，表示混排的预测碰巧比真实数据更加准确，说明该特征不是那么重要（这种情况在样本较小时更容易出现）。</p><p>在我们的示例中，对球员赢得全场最佳球员最重要的特征是进球，这也符合我们的直觉。</p><h2 id="部分依赖图"><a href="#部分依赖图" class="headerlink" title="部分依赖图"></a>部分依赖图</h2><p>部分依赖图是用来展示一个特征是怎样影响模型预测的。可以用部分依赖图解答如下问题：</p><ol><li>假如其他特征不变，经纬度对房价有何影响？</li><li>两组人群的健康情况的不同是饮食差异还是其他因素导致的？</li></ol><p>如果您熟悉线性或逻辑回归模型，则部分依赖图可以使用模型的系数来解释。但是，复杂模型的部分依赖图可以捕获比简单模型系数更复杂的模式。</p><h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h5><p>部分依赖图也是在训练好模型之后使用的。我们从中选择一个球员数据进行说明，例如：球员占全队50%的持球时长、传球过100次、射门10次并进球1次。</p><ol><li>得到训练好的模型，并预测该球员赢得全场最佳球员的概率。</li><li>选择一个特征，变换该特征数值。例如：将进球数特征分别设置为1、2、3次。</li><li>画出预测概率随着进球数变化的走势图。</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifier<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier<span class="token keyword">from</span> pdpbox <span class="token keyword">import</span> pdp<span class="token punctuation">,</span> get_dataset<span class="token punctuation">,</span> info_plotsdata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./input/FIFA 2018 Statistics.csv'</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'Man of the Match'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"Yes"</span><span class="token punctuation">)</span>feature_names <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">.</span>columns <span class="token keyword">if</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dtype <span class="token keyword">in</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>int64<span class="token punctuation">]</span><span class="token punctuation">]</span>X <span class="token operator">=</span> data<span class="token punctuation">[</span>feature_names<span class="token punctuation">]</span>train_X<span class="token punctuation">,</span> val_X<span class="token punctuation">,</span> train_y<span class="token punctuation">,</span> val_y <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>tree_model <span class="token operator">=</span> DecisionTreeClassifier<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> min_samples_split<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>                                  random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_X<span class="token punctuation">,</span> train_y<span class="token punctuation">)</span>pdp_goals <span class="token operator">=</span> pdp<span class="token punctuation">.</span>pdp_isolate<span class="token punctuation">(</span>model<span class="token operator">=</span>tree_model<span class="token punctuation">,</span> dataset<span class="token operator">=</span>val_X<span class="token punctuation">,</span> model_features<span class="token operator">=</span>feature_names<span class="token punctuation">,</span> feature<span class="token operator">=</span><span class="token string">'Goal Scored'</span><span class="token punctuation">)</span>pdp<span class="token punctuation">.</span>pdp_plot<span class="token punctuation">(</span>pdp_goals<span class="token punctuation">,</span> <span class="token string">'Goal Scored'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/04/08/ji-qi-xue-xi-de-ke-jie-shi-xing/7.png" alt="7"></p><p>解释：</p><ul><li>y轴表示相较于基准预测的增加值</li><li>蓝色区域表示置信区间</li><li>有图可知，随着进球数增多，球员赢得全场最佳球员的概率增加，增加到一定程度后收敛。</li></ul><h5 id="探究模型复杂度对部分依赖图的影响"><a href="#探究模型复杂度对部分依赖图的影响" class="headerlink" title="探究模型复杂度对部分依赖图的影响"></a>探究模型复杂度对部分依赖图的影响</h5><p><img src="/2021/04/08/ji-qi-xue-xi-de-ke-jie-shi-xing/7.png" alt="7"></p><p><img src="/2021/04/08/ji-qi-xue-xi-de-ke-jie-shi-xing/8.png" alt="8"></p><p>对比显示，玩家跑100公里，更有可能赢得全场最佳球员，更多的距离，会降低预测值。通常，随机森林曲线更高的平滑度要比决策树曲线更加合理。</p><h5 id="2D部分依赖图"><a href="#2D部分依赖图" class="headerlink" title="2D部分依赖图"></a>2D部分依赖图</h5><p>通过组合特征可得到任意组合下的预测。</p><pre class=" language-python"><code class="language-python">features_to_plot <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Goal Scored'</span><span class="token punctuation">,</span> <span class="token string">'Distance Covered (Kms)'</span><span class="token punctuation">]</span>inter1  <span class="token operator">=</span>  pdp<span class="token punctuation">.</span>pdp_interact<span class="token punctuation">(</span>model<span class="token operator">=</span>tree_model<span class="token punctuation">,</span> dataset<span class="token operator">=</span>val_X<span class="token punctuation">,</span> model_features<span class="token operator">=</span>feature_names<span class="token punctuation">,</span> features<span class="token operator">=</span>features_to_plot<span class="token punctuation">)</span>pdp<span class="token punctuation">.</span>pdp_interact_plot<span class="token punctuation">(</span>pdp_interact_out<span class="token operator">=</span>inter1<span class="token punctuation">,</span> feature_names<span class="token operator">=</span>features_to_plot<span class="token punctuation">,</span> plot_type<span class="token operator">=</span><span class="token string">'contour'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/04/08/ji-qi-xue-xi-de-ke-jie-shi-xing/9.png" alt="9"></p><p>从上图可以看到，当大于一个进球且总距离接近100km时，我们得到的预测更高。若进球数为0，则覆盖范围就显得无关紧要了。</p><h6 id="SHAP-Values"><a href="#SHAP-Values" class="headerlink" title="SHAP Values"></a>SHAP Values</h6><p>SHAP（Shapley Additive explanation）用来细分每个特征对预测结果的影响。</p><h5 id="SHAP"><a href="#SHAP" class="headerlink" title="SHAP"></a>SHAP</h5><p>Shaply值由美国洛杉矶加州大学罗伊德·夏普利（Lloyd Shapley）提出，用来解决合作博弈贡献和收益分配问题。N个人的合作中，单个成员的贡献不同，收益分配不同。理想的分配方式：贡献==收益。Shapey值是某参与者参与一个合作项目，其所有可能贡献情况的加权，求和取平均的过程。</p><p>贡献和收益如何量化呢？</p><p>Shapley值就是一种方法。<br><img src="/2021/04/08/ji-qi-xue-xi-de-ke-jie-shi-xing/3.png" alt="3"></p><p>这里简要说明一下shape运行逻辑。</p><p>我们有一个黑盒模型m，有一条样本x，由a,b,c三个特征组成。我们应该如何获取a在最终预测中的贡献度呢？特征贡献最直观的做法是看某个特征在与不在对预测结果的影响，但是这有一个问题，特征受多重共线性的影响，若c先于a引入且c和a作用相似，则a的贡献可能被低估。所以，我们采用另一种计算方式：</p><p>看特征在不同阶段的边际贡献。有a、b、c三个特征，计算a特征贡献是要分别计算a作为第一个、第二个、第三个特征引入的边际贡献是多少。其中a代表引入，$a’$代表缺失。</p><ol><li>作为第一个特征引入，$边际贡献 = m(a,b’,c’) - m(a’,b’,c’)$。</li><li>作为第二个特征引入，$\frac{(m(a, b, c’) - m(a’, b, c’)) + (m(a, b’, c) - m(a’, b’, c))}{2}$</li><li>作为第三个特征引入，$m(a, b, c) - m(a’, b, c)$</li><li>然后把三种情况加和，然后乘以1/3，得到特征a的总体贡献。</li></ol><p>以足球为例，意图预测一名球员赢得“最佳球员”的概率。SHAP values解释了不同特征值对预测结果的影响。我们可以问：</p><p>球队打入3个球对预测的影响有多大？可以使用如下等式分解预测：</p><p>sum(SHAP values for all features) = pred_for_team - pred_for_baseline_values</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifierdata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./input/FIFA 2018 Statistics.csv'</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'Man of the Match'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"Yes"</span><span class="token punctuation">)</span> feature_names <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">.</span>columns <span class="token keyword">if</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dtype <span class="token keyword">in</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>int64<span class="token punctuation">,</span> np<span class="token punctuation">.</span>int64<span class="token punctuation">]</span><span class="token punctuation">]</span>X <span class="token operator">=</span> data<span class="token punctuation">[</span>feature_names<span class="token punctuation">]</span>train_X<span class="token punctuation">,</span> val_X<span class="token punctuation">,</span> train_y<span class="token punctuation">,</span> val_y <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>rf_model <span class="token operator">=</span> RandomForestClassifier<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_X<span class="token punctuation">,</span> train_y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第5行数据</span>row_to_show <span class="token operator">=</span> <span class="token number">5</span>data_for_prediction <span class="token operator">=</span> val_X<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>row_to_show<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># use 1 row of data here. Could use multiple rows if desired</span>data_for_prediction_array <span class="token operator">=</span> data_for_prediction<span class="token punctuation">.</span>values<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>rf_model<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>data_for_prediction_array<span class="token punctuation">)</span></code></pre><p>球队有70%的概率赢得该选项。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> shap  <span class="token comment" spellcheck="true"># package used to calculate Shap values</span><span class="token comment" spellcheck="true"># Create object that can calculate shap values</span>explainer <span class="token operator">=</span> shap<span class="token punctuation">.</span>TreeExplainer<span class="token punctuation">(</span>rf_model<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Calculate Shap values</span>shap_values <span class="token operator">=</span> explainer<span class="token punctuation">.</span>shap_values<span class="token punctuation">(</span>data_for_prediction<span class="token punctuation">)</span>shap<span class="token punctuation">.</span>initjs<span class="token punctuation">(</span><span class="token punctuation">)</span>shap<span class="token punctuation">.</span>force_plot<span class="token punctuation">(</span>explainer<span class="token punctuation">.</span>expected_value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shap_values<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data_for_prediction<span class="token punctuation">)</span></code></pre><p>shap_values对象是两个数组的列表。第一个数组是负面结果的SHAP值（不赢的奖励），第二个数组是正面结果的值（赢得奖励）。shap包可以可视化结果。</p><p><img src="/2021/04/08/ji-qi-xue-xi-de-ke-jie-shi-xing/10.png" alt="10"></p><p>我们预测是0.7，base_value为0.5013，导致预测值增加的特征用粉红色表示，其长度代表特征效果大小，降低预测值的特征显示为蓝色。从图中可以看出，最大的影响来自：目标得分2，控球比对结果有负向的影响。</p><h2 id="SHAP-Values的高级用法"><a href="#SHAP-Values的高级用法" class="headerlink" title="SHAP Values的高级用法"></a>SHAP Values的高级用法</h2><p>现在，我们将聚合snap值来完成替代特征重要性和偏相关图的方法。</p><p>SHAP Values可以用来显示给定特征对预测值有多大影响。之前我们曾显示了单条样本的各种特征对预测结果的影响。</p><h5 id="摘要图"><a href="#摘要图" class="headerlink" title="摘要图"></a>摘要图</h5><p>特征重要度很重要，因为它可以度量哪些特征对模型更加重要。有助于我们轻松低在各个特征之间进行比较，然后将结果图展示给非技术人员。但是，这并不能告诉我们每个功能的重要性。若一个特征具有中等的重要程度，则可能意味着它对于一些预测有很大影响，但总体上没有影响，或者是对所有预测都起中等影响。SHAP摘要图可以可视化各个特征重要性及驱动因素。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> shap<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifierdata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./input/FIFA 2018 Statistics.csv'</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'Man of the Match'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"Yes"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Convert from string "Yes"/"No" to binary</span>feature_names <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">.</span>columns <span class="token keyword">if</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dtype <span class="token keyword">in</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>int64<span class="token punctuation">,</span> np<span class="token punctuation">.</span>int64<span class="token punctuation">]</span><span class="token punctuation">]</span>X <span class="token operator">=</span> data<span class="token punctuation">[</span>feature_names<span class="token punctuation">]</span>train_X<span class="token punctuation">,</span> val_X<span class="token punctuation">,</span> train_y<span class="token punctuation">,</span> val_y <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>rf_model <span class="token operator">=</span> RandomForestClassifier<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_X<span class="token punctuation">,</span> train_y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Create object that can calculate shap values</span>explainer <span class="token operator">=</span> shap<span class="token punctuation">.</span>TreeExplainer<span class="token punctuation">(</span>rf_model<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># calculate shap values. This is what we will plot.</span><span class="token comment" spellcheck="true"># Calculate shap_values for all of val_X rather than a single row, to have more data for plot.</span>shap_values <span class="token operator">=</span> explainer<span class="token punctuation">.</span>shap_values<span class="token punctuation">(</span>val_X<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Make plot. Index of [1] is explained in text below.</span>shap<span class="token punctuation">.</span>summary_plot<span class="token punctuation">(</span>shap_values<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val_X<span class="token punctuation">)</span></code></pre><p><img src="/2021/04/08/ji-qi-xue-xi-de-ke-jie-shi-xing/11.png" alt="11"></p><p>该图由许多点组成。</p><ul><li>垂直位置显示描述的特征</li><li>点的颜色显示该行特征是高是低。</li><li>水平位置显示该特征值的影响会导致更高还是更低的预测。</li></ul><p>例如，左上角的点是球队进球很少，将预测值降低了0.25。Red和Yellow &amp; Red特征重要性较低。通常，黄色不会影响预测，但在极端情况下，较高的值得到较低的预测。</p><p>注意：计算SHAP可能很慢，需要注意数据集的大小。但是使用xgboost模型时，由于该模型对SHAP进行了优化，速度会更快。</p><h5 id="SHAP依赖性贡献图"><a href="#SHAP依赖性贡献图" class="headerlink" title="SHAP依赖性贡献图"></a>SHAP依赖性贡献图</h5><p>先前，我们使用部分依赖图来显示单个特征如何影响预测。但同时也有一些问题没有显现出来。比如，效果分布是什么？某个特征值效果是否恒定，是否取决于其他特征值相差很大？SHAP依赖性贡献图提供了与PDP类似的见解，但增加了更多的细节。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> shap  <span class="token comment" spellcheck="true"># package used to calculate Shap values</span><span class="token comment" spellcheck="true"># Create object that can calculate shap values</span>explainer <span class="token operator">=</span> shap<span class="token punctuation">.</span>TreeExplainer<span class="token punctuation">(</span>rf_model<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># calculate shap values. This is what we will plot.</span>shap_values <span class="token operator">=</span> explainer<span class="token punctuation">.</span>shap_values<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># make plot.</span>shap<span class="token punctuation">.</span>dependence_plot<span class="token punctuation">(</span><span class="token string">'Ball Possession %'</span><span class="token punctuation">,</span> shap_values<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">,</span> interaction_index<span class="token operator">=</span><span class="token string">"Goal Scored"</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/04/08/ji-qi-xue-xi-de-ke-jie-shi-xing/12.png" alt="12"></p><p>这种向上的趋势表明占有的球权(Ball Possession)越多，对预测为赢的贡献就越高。</p><p><img src="/2021/04/08/ji-qi-xue-xi-de-ke-jie-shi-xing/4.png" alt="4"></p><p>但是，从上图又可以看出，Ball Possession必须与其他特征相互作用。例如：我们突出圈出两个相似球权值得点，却一个导致预测增加，一个导致预测减少。</p><p><img src="/2021/04/08/ji-qi-xue-xi-de-ke-jie-shi-xing/5.png" alt="5"></p><p>这两个点脱颖而出，与上升趋势相去甚远。表明，拥有球会增加球队赢得奖项的机会（拥有球权和SHAP VALUES正相关），但如果大量球权却只进了一个球，情况就会逆转，变得不利于赢的最佳球员。</p>]]></content>
      
      
      <categories>
          
          <category> 可解释性机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可解释性机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>年轻人需要知道的10个人生道理</title>
      <link href="2021/04/08/nian-qing-ren-xu-yao-zhi-dao-de-10-ge-ren-sheng-dao-li/"/>
      <url>2021/04/08/nian-qing-ren-xu-yao-zhi-dao-de-10-ge-ren-sheng-dao-li/</url>
      
        <content type="html"><![CDATA[<h2 id="年轻人需要知道的10个人生道理"><a href="#年轻人需要知道的10个人生道理" class="headerlink" title="年轻人需要知道的10个人生道理"></a>年轻人需要知道的10个人生道理</h2><ol><li><p>你做的决定不可能永远都是对的，做决定要果断，不要犹犹豫豫。</p></li><li><p>多和比你成功的人交往。成功泛指生活、工作的方方面面，了解他们达到目标的方法。</p></li><li><p>很多人不知道自己的人生目标，一直在等待，但其实徘徊和摸索才是阻碍人生发展的真正障碍。解决这个很简单，就是去干，干了自然就知道下一步怎么走了。</p></li><li><p>期待自己的人生会出现不顺利、坎坷的感觉。生活就是由一个一个问题组成的，我们最好做好随时出现问题的准备，对意外有期望值，以不至于被生活打垮。（《平凡的世界》也说明了生活的真相是不幸和坎坷，我们最好保持一个积极的心态，勇敢面对各种意外的变化，一个一个地解决问题。）</p></li><li><p>保持终身学习。学校教育教授的东西有限，学习别人的生活经历，也是自己的生活走捷径的一个过程。不同文化、不同的思维方式都值得参考和学习。</p></li><li><p>负责任。对自己负责任，同时对别人的事不过分负责任。 </p></li><li><p>面对现实，不要欺骗自己。</p></li><li><p>面对自己不了解的事情，不要瞎猜测。我们的大脑喜欢不确定性。当一个事情不知道原因时，我们大脑希望一个故事，可以确定原因。</p></li><li><p>世界上没有偷懒的捷径。世界上的任何事情都要有付出有回报，光鲜的背后，往往是大量的付出。</p></li><li><p>人生也可以有少走弯路的捷径。比如学习，我们可以改变学习方式，学习态度来改变相对困难的学习过程。</p></li></ol><h2 id="生活小技巧"><a href="#生活小技巧" class="headerlink" title="生活小技巧"></a>生活小技巧</h2><p>2分钟法则。当面对一个事情感觉为难时，可以先把事情作成一个2分钟的小事。</p><p>二因素习惯法则。固定时间地点，可以更加容易养成习惯。</p>]]></content>
      
      
      <categories>
          
          <category> 人生感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习推荐系统实战之Contextual-Bandit</title>
      <link href="2021/04/05/shen-du-xue-xi-tui-jian-xi-tong-shi-zhan-zhi-contextual-bandit/"/>
      <url>2021/04/05/shen-du-xue-xi-tui-jian-xi-tong-shi-zhan-zhi-contextual-bandit/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>个性化推荐系统通过调整服务内容（新闻、广告等）来为用户提供个性化服务。尽管当前阶段已经取得了一些进步，但是仍存在一些具有挑战性的问题。</p><ol><li>web服务要求动态更新推荐内容，传统的协同过滤方法不够灵活。</li><li>web服务要求推荐系统具有一定的模型学习效率并保证推荐实时性。</li></ol><p>论文把新闻推荐视为带有上下文信息的多臂老虎机问题。采用的一种有效的做法是根据用户和文章的上下文信息，选择收益最高的文章推荐给用户，同时基于用户点击反馈动态调整策略，从长远来看可以最大化用户的总点击次数。该算法在计算上高效且有很好的理论依据。实验证明加入上下文的Bandit算法比传统Bandit算法的点击率高了12.5%。当数据稀疏时，这个优势甚至更大。论文给出了LinUCB方法和几种传统bandit方法的离线实验对比。</p><p>传统的Bandit算法所存在的问题是没有利用不同臂(物品)之间的特征信息，当一个新物品加入内容库，我们只能从零开始积累用户的点击反馈。针对这种情况，识别物品之间的关联并具备一定的泛化能力就显得至关重要。例如，对于男青年而言，ipad相比养老计划对他更具吸引力。通过提取青年和iap特征，bandit算法可以将用户/文章泛化到下一个用户/文章，快速调整文章，解决冷启动问题。</p><p>LinUCB分为两种。</p><ul><li>线性不相交的disjoint LinUCB</li><li>混合相交的hybrid LinUCB</li></ul><h2 id="disjoint-LinUCB"><a href="#disjoint-LinUCB" class="headerlink" title="disjoint LinUCB"></a>disjoint LinUCB</h2><p>disjoint LinUCB的不同臂之间参数不共享。</p><p><img src="/2021/04/05/shen-du-xue-xi-tui-jian-xi-tong-shi-zhan-zhi-contextual-bandit/1.png" alt="1"></p><p>根据伪代码可以将算法流程分成两步，第一步取最大收益的臂，第二步根据反馈结果更新参数。</p><h5 id="选择最大收益的臂"><a href="#选择最大收益的臂" class="headerlink" title="选择最大收益的臂"></a>选择最大收益的臂</h5><p>一个臂进行m次推荐过程中，积累了m个样本，每一个样本的维度是d，则形成m×d维度的D矩阵。<br>其中m个样本含有用户点击/不点击的反馈信息，组成一个m×1的列向量C。</p><p>$D_{m×d}θ_{d×1}=C_{m×1}$</p><p>根据岭回归的矩阵解法，可以推导出</p><p>$θ_{d×1}=(D_{m×d}^{T}D_{m×d}+I_{d×d})^{-1}D_{m×d}^{T}C_{m×1}$</p><p>简化表示，采用A和b代表公式的主要部分。</p><p>$A=D_{m×d}^{T}D_{m×d}+I_{d×d}$</p><p>$b=D_{m×d}^{T}C_{m×1}$</p><p>则$θ_{d×1}=A^{-1}b$。</p><p>预测的期望收益为</p><p>$r=x_{d×1}^{T}θ_{d×1}$</p><p>置信区间上边界为</p><p>$b=α\sqrt{x_{d×1}^{T}(D_{m×d}^{T}D_{m×d}+I_{d×d})^{-1}x_{d×1}}$</p><p>$=α\sqrt{x_{d×1}^{T}A^{-1}x_{d×1}}$</p><p>臂的收益 = 预估期望收益 + 置信区间上界</p><p>按所有臂的收益进行排序，可以得到一个物品推荐列表。</p><h5 id="根据反馈结果更新参数"><a href="#根据反馈结果更新参数" class="headerlink" title="根据反馈结果更新参数"></a>根据反馈结果更新参数</h5><p>当一个臂被推荐出去之后，样本$D_{m×d}$变为$D_{(m+1)×d}$，A变为$A+x_{d×1}x_{d×1}^{T}$，b变为$b+rx_{d×1}$（r是回报），根据A和b可以更新θ。</p><h2 id="实验评估"><a href="#实验评估" class="headerlink" title="实验评估"></a>实验评估</h2><p>相比机器学习中的监督学习问题，基于环境的Bandit算法的评估更加困难。我们的目标是衡量bandit算法π的效果，每次臂的选择是基于前一次交互信息。<br>似乎唯一可行的评估方法就是在实时数据中运行该算法。我们能够收集到的只有之前采用不同策略获取到的离线日志，尚不清楚如何评估此类日志数据。这类评估问题被视为”离线策略评估问题“中的特例问题。</p><p>一种解决方案是建立一个在日志数据中模拟bandit过程的模拟器。然后，使用模拟器评估π。但是建立模拟器的过程会引入偏差，很难证明该方法的有效性。我们提出一种简单的方法实施，基于记录的数据且无偏差。</p><p>我们的目标是使用离线数据来评估bandit算法π。π是一个策略，根据历史$h_{t-1}$和上下文向量$x_{t1},…,x_{tK}$在时间t选择臂$a_{t}$。</p><p>采用算法<em>3</em>所示的评估方法。T个离线日志，一步一步遍历事件。在给定当前历史行为$h_{t-1}$的情况下，如果策略π选择一个与日志策略相同的臂a，则保留该事件，并将其添加到历史记录中，更新总收益$R_{T}$。否则当策略π选择一个与日志策略不同的臂a，则该算法忽略该日志，不进行任何操作。</p><p><img src="/2021/04/05/shen-du-xue-xi-tui-jian-xi-tong-shi-zhan-zhi-contextual-bandit/3.png" alt="3"></p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>雅虎首页的F1位置使用了该算法，并进行了为期一周的测试。雅虎的今日头条是Internet上访问量最大的模块。今日头条模块放置四篇高质量的文章，四篇文章是从人工编辑的文章库中选出，每小时刷新一次。如下图所示，默认F1处的文章大图显示。我们希望排名根据个人兴趣提供文章，并突出显示对于该访客最具吸引力的文章。</p><p><img src="/2021/04/05/shen-du-xue-xi-tui-jian-xi-tong-shi-zhan-zhi-contextual-bandit/2.png" alt="2"></p><h2 id="实验设置"><a href="#实验设置" class="headerlink" title="实验设置"></a>实验设置</h2><h5 id="数据收集"><a href="#数据收集" class="headerlink" title="数据收集"></a>数据收集</h5><p>5月1日，以当天的日志（470万）为模型确定每种bandit算法的最佳参数，随后使用调整后的参数运行算法。</p><p>5月3日-9日，以为期一周的日志（3600万）来评估模型。</p><h5 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h5><p>用户特征</p><ul><li>人口统计信息：性别(2类)和年龄(离散为10段)</li><li>地理特征：全球和美国各州(200)</li><li>行为特征：1000个one-hot编码雅虎用户消费历史记录。</li></ul><p>文章特征</p><ul><li><p>URL类别：文章分类(数十)</p></li><li><p>人工编辑类别：人工编辑主题(数十)</p></li></ul><p>文章特征进行了one-hot编码，然后每个特征向量归一化为单位长度，增加了每个特征向量具有值为1的恒定特征。（为何增加一个特征向量为1的恒定特征呢？）</p><h5 id="结果对比"><a href="#结果对比" class="headerlink" title="结果对比"></a>结果对比</h5><p>算法分为三类：</p><p>I 未使用feature的bandit算法</p><ul><li><p>random</p></li><li><p>e-greedy</p></li><li><p>无所不知 策略达到最佳经验时，得出的无关上下文的点击率。首先计算每篇文章的经验点击率，然后始终选择最高经验点击率的文章。</p></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>《A Contextual-Bandit Approach to<br>Personalized News Article Recommendation》<a href="https://arxiv.org/pdf/1003.0146.pdf">https://arxiv.org/pdf/1003.0146.pdf</a></p><p>《LinUCB论文的思想解读、场景应用与痛点说明》<a href="https://zhuanlan.zhihu.com/p/127189465">https://zhuanlan.zhihu.com/p/127189465</a></p><p>《Contextual Bandit算法在推荐系统中的实现及应用》<a href="https://zhuanlan.zhihu.com/p/35753281">https://zhuanlan.zhihu.com/p/35753281</a></p>]]></content>
      
      
      <categories>
          
          <category> 推荐算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习推荐系统实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>未来几年，普通人可选择的三种投资方式</title>
      <link href="2021/04/04/wei-lai-shi-nian-pu-tong-ren-zhuan-qian-de-ji-hui-zai-na-li/"/>
      <url>2021/04/04/wei-lai-shi-nian-pu-tong-ren-zhuan-qian-de-ji-hui-zai-na-li/</url>
      
        <content type="html"><![CDATA[<p>未来几年，普通人可以选择的三种投资方式。</p><h5 id="一）一二线城市核心地段的房子。"><a href="#一）一二线城市核心地段的房子。" class="headerlink" title="一）一二线城市核心地段的房子。"></a>一）一二线城市核心地段的房子。</h5><p>这个不用说，未来几年北上广深的核心地段的房子一直都是保值的。</p><h5 id="二）龙头公司的优质股票。"><a href="#二）龙头公司的优质股票。" class="headerlink" title="二）龙头公司的优质股票。"></a>二）龙头公司的优质股票。</h5><p>随着大幅印钞，未来物价会跌，但是一些龙头公司的优质股票是一直保持升值的。现今这些公司一直处在高估值、高波动的状态。我们需要长期看好并且与泡沫共舞，从长远来看也可以获取不菲的收益。诚然，这种选择需要有一定的信心和技术门槛的。</p><h5 id="三）个人能力的投资。"><a href="#三）个人能力的投资。" class="headerlink" title="三）个人能力的投资。"></a>三）个人能力的投资。</h5><p>自身和子女教育是最好的投资方式。几乎零成本而且终身收益。这跟钱多少没有关系，现在社会学习渠道和内容很多，个人提升不一定非要上清华北大。罗永浩中学文聘，曹德旺、李嘉诚小学文聘，鲁迅中学文聘。但是，中学文聘不等于中学水平。除了学习之外，创业试错，出国游学，大企业就职，参观展会，职业教育，读书演讲等这些都是提高个人能力。可能有人反驳，不是学习就一定有回报吗？不是7万研究生去送外卖了吗？而且很多人没怎么读书却成了社会精英，而有些人读了几十年的书也没有发财呢？这就需要知道读书和学习的关系。</p><ul><li>读书不是学习的唯一方式。</li><li>文聘不等于认知水平。</li><li>要承认每个人有不同的天赋。</li></ul><p>读书这件事不应该做横向比较，更应该和自身做对比。读书不一定是成功的全部因素，但也一定是必要因素。一个知识量大的人也许赚不到多少钱，但也许没有这些知识，他可能混的更惨。所以把多余的钱砸在自己和孩子个人能力提高上是一件性价比高且很有必要的一件事。</p>]]></content>
      
      
      <categories>
          
          <category> 人生感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习推荐系统实战之Bandit</title>
      <link href="2021/04/02/shen-du-xue-xi-tui-jian-xi-tong-shi-zhan-zhi-bandit/"/>
      <url>2021/04/02/shen-du-xue-xi-tui-jian-xi-tong-shi-zhan-zhi-bandit/</url>
      
        <content type="html"><![CDATA[<h2 id="Bandit起源"><a href="#Bandit起源" class="headerlink" title="Bandit起源"></a>Bandit起源</h2><p>Bandit算法来源于历史悠久的赌博学。想象这样一个场景：一个赌徒走进赌场，一眼看去是一排外表一摸一样的老虎机。每个老虎机吐钱的概率不一样，他应该在每次如何选择老虎机才可以做到最大化收益？这就是多臂赌博机问题（Muti-arm Bandits，简称MAB）。一系列应对该问题的策略统称为Bandit算法。</p><p><img src="/2021/04/02/shen-du-xue-xi-tui-jian-xi-tong-shi-zhan-zhi-bandit/1.png" alt="1"></p><p>现实生活中我们也会遇到一系列类似的场景：</p><ol><li>新用户进入系统，如何得知他对哪个类别更感兴趣？</li><li>有若干广告库物料，如何展示广告，才能获得最大收益？是一直展示收益最高的吗？</li><li>玩家进入新游戏，哪个关卡是他最感兴趣的，如何合理排序？</li></ol><p>解决这类问题最好的方法就是去试，但也不是随便试，而是有策略的试，通过多次实验摸透每个老虎机背后的赢钱规律（概率分布）。</p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h5 id="累计遗憾"><a href="#累计遗憾" class="headerlink" title="累计遗憾"></a>累计遗憾</h5><p>Bandit算法的思想是，看看每次选择会带来多少遗憾，累计遗憾越少越好。</p><p>$R_{T}=\sum_{i=1}^{T}(w_{opt}-w_{B(i)})=Tw^{*} - \sum_{i=1}^{T}w_{B(i)}$</p><p>$w_{opt}$是每次最优选择得到的收益，$w_{B(i)}$是每次实际选择得到的收益，二者的差就是遗憾的量化。进行T次选择之后，就获得累计遗憾$R_{T}$。</p><h2 id="Bandit算法"><a href="#Bandit算法" class="headerlink" title="Bandit算法"></a>Bandit算法</h2><p>为了更好的学习Bandit算法，我们可以带入下场景。一名拉斯维加斯赌徒走进了赌城，面前有5台老虎机，每台老虎机上都有一个拉杆，如何通过有限的尝试知道哪台老虎机赢钱概率最大？下面介绍多种应对的策略。</p><h5 id="朴素bandit"><a href="#朴素bandit" class="headerlink" title="朴素bandit"></a>朴素bandit</h5><p>随机试若干次，计算每个臂的平均收益，一直选均值最大的那个臂。这个算法是在实际生活中最常采用的。</p><h5 id="Epsilon-Greedy"><a href="#Epsilon-Greedy" class="headerlink" title="Epsilon-Greedy"></a>Epsilon-Greedy</h5><p>Epsilon贪婪算法原理</p><ol><li>在(0, 1)之间选择一个数，名为epsilon。</li><li>每次以epsilon概率随机选择一个臂，以1-epsilon概率选择平均收益最大的臂。</li></ol><h5 id="UCB"><a href="#UCB" class="headerlink" title="UCB"></a>UCB</h5><p>置信区间上界（Upper Confidence Bound，UCB），为每个臂评分，选择评分最高的候选臂。然后观察用户反馈，更新候选臂。</p><p>$x_{j}^{-}(t) + \sqrt{\frac{2lnt}{T_{j,t}}}$</p><p>t是目前的总选择次数，$x_{j}^{-}$是每个臂的平均收益，$T_{j,t}$是j臂的选择次数。由公式可知，一个候选臂被选择次数$T_{j,t}$越小，它的价值越大，排序越靠前。（从公式上可以看出，除了臂本身的平均收益之外，增加了一个选择次数的纬度，相同次数下，选择次数越少，值越大。）</p><h5 id="Thompson-Sample"><a href="#Thompson-Sample" class="headerlink" title="Thompson Sample"></a>Thompson Sample</h5><p>汤普森采样算法原理</p><ol><li>假设每个臂背后的概率分布是Beta分布。</li><li>每次选择，每个臂都会出一个随机数，然后按随机数排序，输出最大随机数的臂对应的物品。</li></ol><p>代入到推荐场景中。Beta分布有两个参数，a参数代表用户点击次数，b参数代表用户没有点击次数，然后进行汤普森采样。</p><ol><li>取出每一个候选臂对应的参数a和b。</li><li>每个候选臂根据Beta(a,b)产生一个随机数。</li><li>按随机数排序，输出最大值对应的候选臂。</li><li>根据用户反馈，用户点击则a+1，否则b+1。</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">class</span> <span class="token class-name">Bandits</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>n_bandits <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment" spellcheck="true"># 10组老虎机</span>        self<span class="token punctuation">.</span>n_arms <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment" spellcheck="true"># 5台老虎机（每台老虎机1个臂）</span>        self<span class="token punctuation">.</span>n_pulls <span class="token operator">=</span> <span class="token number">1000</span> <span class="token comment" spellcheck="true"># 总共拉1000次</span>        self<span class="token punctuation">.</span>strategies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'random'</span><span class="token punctuation">,</span> <span class="token string">'epsilon_greedy'</span><span class="token punctuation">,</span> <span class="token string">'ucb'</span><span class="token punctuation">,</span> <span class="token string">'thompson_sample'</span><span class="token punctuation">]</span>                <span class="token comment" spellcheck="true"># epsilon_greedy参数</span>        self<span class="token punctuation">.</span>epsilon <span class="token operator">=</span> <span class="token number">0.3</span>        self<span class="token punctuation">.</span>decay_rate <span class="token operator">=</span> <span class="token number">0.999</span>        self<span class="token punctuation">.</span>min_epsilon <span class="token operator">=</span> <span class="token number">0.1</span>            <span class="token keyword">def</span> <span class="token function">pick_arm</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strategy<span class="token punctuation">,</span> q_values<span class="token punctuation">,</span> counts<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">""" 选择臂        :strategy 策略        :q_value 每个臂的收益        :counts 总次数        :success 收益        :failure 遗憾        """</span>        <span class="token keyword">if</span> strategy <span class="token operator">==</span> <span class="token string">'random'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>q_values<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">elif</span> strategy <span class="token operator">==</span> <span class="token string">'epsilon_greedy'</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># [0.1, 0.3]</span>            epsilon <span class="token operator">=</span> max<span class="token punctuation">(</span>self<span class="token punctuation">.</span>epsilon<span class="token operator">*</span>self<span class="token punctuation">.</span>decay_rate<span class="token punctuation">,</span> self<span class="token punctuation">.</span>min_epsilon<span class="token punctuation">)</span>            <span class="token keyword">if</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> epsilon<span class="token punctuation">:</span>                best_arms_value <span class="token operator">=</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>q_values<span class="token punctuation">)</span>                best_arms <span class="token operator">=</span> np<span class="token punctuation">.</span>argwhere<span class="token punctuation">(</span>q_values <span class="token operator">==</span> best_arms_value<span class="token punctuation">)</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> best_arms<span class="token punctuation">[</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>best_arms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>q_values<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">elif</span> strategy <span class="token operator">==</span> <span class="token string">'ucb'</span><span class="token punctuation">:</span>            total_counts <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>counts<span class="token punctuation">)</span>            ucb_q_values <span class="token operator">=</span> q_values <span class="token operator">+</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span>reciprocal<span class="token punctuation">(</span>counts<span class="token operator">+</span><span class="token number">0.001</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span>math<span class="token punctuation">.</span>log<span class="token punctuation">(</span>total_counts<span class="token operator">+</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            best_arms_value <span class="token operator">=</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>ucb_q_values<span class="token punctuation">)</span>            best_arms <span class="token operator">=</span> np<span class="token punctuation">.</span>argwhere<span class="token punctuation">(</span>ucb_q_values <span class="token operator">==</span> best_arms_value<span class="token punctuation">)</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> best_arms<span class="token punctuation">[</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>best_arms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>                <span class="token keyword">elif</span> strategy <span class="token operator">==</span> <span class="token string">'thompson_sample'</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">""" 利用beta分布选择杆 """</span>            sample_means <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>len<span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                sample_means<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>beta<span class="token punctuation">(</span>success<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> failure<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>sample_means<span class="token punctuation">)</span>                <span class="token keyword">def</span> <span class="token function">plot_result</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">""" 绘制曲线 """</span>        fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>        ax <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> st <span class="token keyword">in</span> self<span class="token punctuation">.</span>strategies<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 初始化</span>            <span class="token comment" spellcheck="true"># 记录10x5台老虎机拉杆次数</span>            best_arm_counts <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_bandits<span class="token punctuation">,</span> self<span class="token punctuation">.</span>n_pulls<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_bandits<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 每个杆是最大收益的概率</span>                arm_prob <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_arms<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 收益最大的杆</span>                best_arm <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>arm_prob<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 收益率</span>                q_values <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_arms<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 统计拉杆次数</span>                counts <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_arms<span class="token punctuation">)</span>                success <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_arms<span class="token punctuation">)</span>                failure <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_arms<span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true"># 拉1000次杆</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_pulls<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 根据不同策略选择臂</span>                    _arm <span class="token operator">=</span> self<span class="token punctuation">.</span>pick_arm<span class="token punctuation">(</span>st<span class="token punctuation">,</span> q_values<span class="token punctuation">,</span> counts<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failure<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 选择臂的收益</span>                    reward <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>binomial<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> arm_prob<span class="token punctuation">[</span>_arm<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 拉杆次数统计</span>                    counts<span class="token punctuation">[</span>_arm<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>                    <span class="token comment" spellcheck="true"># 更新收益</span>                    q_values<span class="token punctuation">[</span>_arm<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>reward<span class="token operator">-</span>q_values<span class="token punctuation">[</span>_arm<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> counts<span class="token punctuation">[</span>_arm<span class="token punctuation">]</span>                    <span class="token comment" spellcheck="true"># 成功的收益</span>                    success<span class="token punctuation">[</span>_arm<span class="token punctuation">]</span> <span class="token operator">+=</span> reward                    <span class="token comment" spellcheck="true"># 失败的收益</span>                    failure<span class="token punctuation">[</span>_arm<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>reward<span class="token punctuation">)</span>                    best_arm_counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> counts<span class="token punctuation">[</span>best_arm<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">100.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#print('====== st:{}, i:{} '.format(st, i))</span>                <span class="token comment" spellcheck="true">#print('arm_prob: ', arm_prob)</span>                            <span class="token comment" spellcheck="true"># 横纵坐标</span>            y <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>best_arm_counts<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>            x <span class="token operator">=</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print('strategy: ', st)</span>            ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> label<span class="token operator">=</span>st<span class="token punctuation">)</span>            ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>                plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'steps'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'optimal pull'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>bandits <span class="token operator">=</span> Bandits<span class="token punctuation">(</span><span class="token punctuation">)</span>bandits<span class="token punctuation">.</span>plot_result<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/04/02/shen-du-xue-xi-tui-jian-xi-tong-shi-zhan-zhi-bandit/2.png" alt="2"></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>random表现最差，采用5个里面随机选择一个杆的方式，选择最高收益杆的概率趋近于0.2。</p><p>汤普森采样表现最好，能够最快速的找到收益最大的杆，其次是Epsilon-Greedy、UCB。</p>]]></content>
      
      
      <categories>
          
          <category> 推荐算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习推荐系统实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度强化学习实战之Q-learning</title>
      <link href="2021/03/30/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-q-learning/"/>
      <url>2021/03/30/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-q-learning/</url>
      
        <content type="html"><![CDATA[<p>Q-Learning，是另一种TD算法，DQN就是Q-learning的一种实现方式。</p><h2 id="Sarsa-vs-Q-Learning"><a href="#Sarsa-vs-Q-Learning" class="headerlink" title="Sarsa vs Q-Learning"></a>Sarsa vs Q-Learning</h2><p>sarsa和Qlearning都是TD算法，但解决的问题不同。</p><h5 id="Sarsa"><a href="#Sarsa" class="headerlink" title="Sarsa"></a>Sarsa</h5><p>Sarsa是训练价值动作函数，$Q_{π}(s,a)$</p><p>TD target: $y_{t} = r_{t} + γ·Q_{π}(s_{t+1}, a_{t+1})$</p><p>我们使用sarsa更新价值网络(critic)。</p><h5 id="Q-Learning"><a href="#Q-Learning" class="headerlink" title="Q-Learning"></a>Q-Learning</h5><p>Q-learning是训练最优动作价值函数$Q^{*}(s,a)$</p><p>TD target: $y_{t} = r_{t} + γ·max_{a}Q^{*}(s_{t+1}, a)$</p><p>我们使用Q-learning更新DQN。</p><h2 id="推导TD-target"><a href="#推导TD-target" class="headerlink" title="推导TD target"></a>推导TD target</h2><p>$Q_{π}(s_{t}, a_{t})=E[R_{t}+γ·Q_{π}(S_{t+1}, A_{t+1})]$</p><p>如果π是最优策略$π^{*}$</p><p>$Q_{π*}(s_{t}, a_{t})=E[R_{t}+γ·Q_{π^{*}}(S_{t+1}, A_{t+1})]$</p><p>$Q_{π*}$和$Q^{*}$都表示最优动作价值函数。</p><p>$Q*(s_{t},a_{t})=E[R_{t}+γ·Q*(S_{t+1},A_{t+1})]$</p><p>动作$A_{t+1}$可以计算为</p><p>$A_{t+1}=argmax_{a}Q*(S_{t+1},a)$</p><p>所以，$Q*(s_{t},a_{t})=E[R_{t}+γ·max_{a}Q*(S_{t+1},a)]$</p><p>直接求期望困难，所以做蒙特卡洛近似，期望中有$R_{t}$用$r_{t}$做近似，$S_{t+1}$用$s_{t}$近似。</p><p>$Q*(s_{t},a_{t})=E[R_{t}+γ·max_{a}Q*(S_{t+1},a)]≈r_{t}+γ·max_{a}Q*(s_{t+1},a)$ (TD target)</p><h2 id="Q-Learning的表格形式"><a href="#Q-Learning的表格形式" class="headerlink" title="Q-Learning的表格形式"></a>Q-Learning的表格形式</h2><h5 id="Q-Learning的表格形式-1"><a href="#Q-Learning的表格形式-1" class="headerlink" title="Q-Learning的表格形式"></a>Q-Learning的表格形式</h5><p><img src="/2021/03/30/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-q-learning/1.png" alt="1"></p><h5 id="学习流程"><a href="#学习流程" class="headerlink" title="学习流程"></a>学习流程</h5><ol><li>观测四元组$(s_{t}, a_{t}, r_{t}, s_{t+1})$</li><li>TD target: $y_{t} = r_{t} + γ·max_{a}Q^{*}(s_{t+1}, a)$</li><li>TD error: $σ_{t}=Q^{*}(s_{t}, a_{t})-y_{t}$</li><li>更新参数: $Q*(s_{t}, a_{t})&lt;-Q*(s_{t}, a_{t})-α·σ_{t}$</li></ol><h2 id="Q-Learning价值网络形式"><a href="#Q-Learning价值网络形式" class="headerlink" title="Q-Learning价值网络形式"></a>Q-Learning价值网络形式</h2><h5 id="Q-Learning价值网络形式-1"><a href="#Q-Learning价值网络形式-1" class="headerlink" title="Q-Learning价值网络形式"></a>Q-Learning价值网络形式</h5><p><img src="/2021/03/30/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-q-learning/2.png" alt="2"></p><h2 id="Q-Learning总结"><a href="#Q-Learning总结" class="headerlink" title="Q-Learning总结"></a>Q-Learning总结</h2><p>目标：学习最优动作价值函数$Q^{*}$<br>形式：</p><ul><li><p>表格</p><ul><li>直接学习$Q*$</li><li>有限的状态和动作</li><li>绘制表格，通过Q-learning更新表格的动作价值</li></ul></li><li><p>价值神经网络</p><ul><li>根据DQN$Q(s,a;w)$近似$Q*$</li><li>使用Q-learning更新参数w</li></ul></li></ul><h2 id="Q-Learning代码实现"><a href="#Q-Learning代码实现" class="headerlink" title="Q-Learning代码实现"></a>Q-Learning代码实现</h2><h5 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h5><p><img src="/2021/03/30/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-q-learning/3.png" alt="3"></p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 产生一组固定的随机序列</span>N_STATES <span class="token operator">=</span> <span class="token number">6</span> <span class="token comment" spellcheck="true"># 状态点数量</span>ACTIONS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 动作</span>EPSILON <span class="token operator">=</span> <span class="token number">0.9</span> <span class="token comment" spellcheck="true"># greedy</span>ALPHA <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token comment" spellcheck="true"># learning rate</span>GAMMA <span class="token operator">=</span> <span class="token number">0.9</span> <span class="token comment" spellcheck="true"># 衰减因子</span>MAX_EPISODE <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment" spellcheck="true"># 迭代次数</span>FRESH_TIME <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token comment" spellcheck="true"># 刷新时间</span><span class="token keyword">def</span> <span class="token function">build_qtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" 建立一个s×a的Q表 """</span>    q_table <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>        np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>N_STATES<span class="token punctuation">,</span> len<span class="token punctuation">(</span>ACTIONS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        columns<span class="token operator">=</span>ACTIONS    <span class="token punctuation">)</span>    <span class="token keyword">return</span> q_table<span class="token keyword">def</span> <span class="token function">choose_action</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> q_table<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" 90%的概率选当前状态下q值大的动作，10%的概率随机选动作 """</span>    state_actions <span class="token operator">=</span> q_table<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>state<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> EPSILON <span class="token operator">or</span> state_actions<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        action_name <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>ACTIONS<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        action_name <span class="token operator">=</span> ACTIONS<span class="token punctuation">[</span>state_actions<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> action_name<span class="token keyword">def</span> <span class="token function">get_env_feedback</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" 选定动作，从环境中得到奖励r和下一次的状态_s """</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token string">'right'</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># agent到达目的地，获得奖励</span>        <span class="token keyword">if</span> s <span class="token operator">==</span> N_STATES <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">:</span>            _s <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>            r <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            _s <span class="token operator">=</span> s<span class="token operator">+</span><span class="token number">1</span>            r <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            _s <span class="token operator">=</span> s        <span class="token keyword">else</span><span class="token punctuation">:</span>            _s <span class="token operator">=</span> s<span class="token number">-1</span>    <span class="token keyword">return</span> _s<span class="token punctuation">,</span> r    <span class="token keyword">def</span> <span class="token function">update_env</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> episode<span class="token punctuation">,</span> step_counter<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" 更新环境 """</span>    env_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-'</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>N_STATES<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'T'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># '------T'</span>    <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'episode: {}, step_counter: {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>episode<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> step_counter<span class="token punctuation">)</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        env_list<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'o'</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>env_list<span class="token punctuation">)</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>FRESH_TIME<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">rl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 1. 初始化一张s×a的q表，初始值均为0。</span>    q_table <span class="token operator">=</span> build_qtable<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'init q-table:\n'</span><span class="token punctuation">,</span> q_table<span class="token punctuation">)</span>        <span class="token keyword">for</span> episode <span class="token keyword">in</span> range<span class="token punctuation">(</span>MAX_EPISODE<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 2. agent和环境初始化，agent的状态s位于出发点。</span>        step_counter <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true"># q表迭代次数</span>        s <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true"># 初始位置</span>        is_terminated <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true"># 回合结束（到达终点）</span>        update_env<span class="token punctuation">(</span>s<span class="token punctuation">,</span> episode<span class="token punctuation">,</span> step_counter<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 初始化agent和环境</span>                <span class="token comment" spellcheck="true"># 3. 根据实际-预估的误差来更新q值，q值（动作价值）越来越准。</span>        <span class="token keyword">while</span> <span class="token operator">not</span> is_terminated<span class="token punctuation">:</span>            a <span class="token operator">=</span> choose_action<span class="token punctuation">(</span>s<span class="token punctuation">,</span> q_table<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 选一个行为</span>            _s<span class="token punctuation">,</span> r <span class="token operator">=</span> get_env_feedback<span class="token punctuation">(</span>s<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取下一个状态和收益</span>            <span class="token comment" spellcheck="true">#print('s, a: ', s, a)</span>            q_predict <span class="token operator">=</span> q_table<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>s<span class="token punctuation">,</span> a<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 获取预估的q值</span>            <span class="token keyword">if</span> _s <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                q_target <span class="token operator">=</span> r <span class="token operator">+</span> GAMMA<span class="token operator">*</span>q_table<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>_s<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                q_target <span class="token operator">=</span> r                is_terminated <span class="token operator">=</span> <span class="token boolean">True</span>                        q_table<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>s<span class="token punctuation">,</span> a<span class="token punctuation">]</span> <span class="token operator">+=</span> ALPHA <span class="token operator">*</span> <span class="token punctuation">(</span>q_target <span class="token operator">-</span> q_predict<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 实际-预估的误差，更新q值</span>            s <span class="token operator">=</span> _s                        update_env<span class="token punctuation">(</span>s<span class="token punctuation">,</span> episode<span class="token punctuation">,</span> step_counter<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 更新环境</span>            step_counter <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'===== q_table:\n'</span><span class="token punctuation">,</span> q_table<span class="token punctuation">)</span>    <span class="token keyword">return</span> q_table</code></pre><p><img src="/2021/03/30/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-q-learning/4.png" alt="4"><br>根据上图可以发现，20轮学习后，小车可以径直走向终点。q-table表中越靠近终点的state，action=’right’的动作价值(q值)越高。</p>]]></content>
      
      
      <categories>
          
          <category> 强化学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度强化学习实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度强化学习实战之sarsa</title>
      <link href="2021/03/30/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-sarsa/"/>
      <url>2021/03/30/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-sarsa/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Sarsa是TD算法的一种。算法每次用一个五元组$(s_{t},a_{t},r_{t},s_{t+1},a_{t+1})$来更新$Q_{π}$，全称State-action-reward-state-action，简称SARSA。</p><h2 id="TD-target推导"><a href="#TD-target推导" class="headerlink" title="TD target推导"></a>TD target推导</h2><p>当前时刻的回报$U_{t} = R_{t} + γR_{t+1} + γ^{2}R_{t+2}…$</p><p><img src="/2021/03/30/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-sarsa/1.png" alt="1"><br>得出，$U_{t}=R_{t} + γ·U_{t+1}$。</p><p>其中，$R_{t}$依赖于$(S_{t}, A_{t}, S_{t+1})$</p><p>$Q_{π}(s_{t},a_{t})=E[U_{t}|s_{t},a_{t}]$</p><p>= $E[R_{t}+γ·U_{t+1}|s_{t},a_{t}]$</p><p>= $E[R_{t}|s_{t},a_{t}]+γ·E[U_{t+1}|s_{t},a_{t}]$</p><p>= $E[R_{t}|s_{t},a_{t}]+γ·E[Q_{π}(S_{t+1},A_{t+1})|s_{t},a_{t}]$<br><img src="/2021/03/30/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-sarsa/2.png" alt="2"></p><p>目标是使动作价值$Q_{π}$更接近$y_{t}$。</p><h2 id="Sarsa表格形式"><a href="#Sarsa表格形式" class="headerlink" title="Sarsa表格形式"></a>Sarsa表格形式</h2><h5 id="Sars的表格形式"><a href="#Sars的表格形式" class="headerlink" title="Sars的表格形式"></a>Sars的表格形式</h5><ul><li>我们想要学习$Q_{π}(s,a)$</li><li>状态和动作都是有限的。</li><li>表中每个元素对应一个动作价值，每次更新表格中的一个元素。</li></ul><p><img src="/2021/03/30/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-sarsa/3.png" alt="3"></p><h5 id="学习流程"><a href="#学习流程" class="headerlink" title="学习流程"></a>学习流程</h5><ol><li>每次观测一个四元组$(s_{t},a_{t},r_{t},s_{t+1})$</li><li>根据policy函数π和$s_{t+1}$随机抽样一个$a_{t+1}$</li><li>TD target: $y_{t}=r_{t}+γ·[Q_{π}(s_{t+1},a_{t+1})$</li><li>TD error: $σ_{t}=Q_{π}(s_{t},a_{t})-y_{t}$</li><li>更新动作价值Q: $σ_{t}(s_{t}, a_{t})&lt;-Q_{π}(s_{t},a_{t})-α·σ_{t}$</li></ol><h2 id="Sarsa价值网络形式"><a href="#Sarsa价值网络形式" class="headerlink" title="Sarsa价值网络形式"></a>Sarsa价值网络形式</h2><h5 id="Sarsa价值网络形式-1"><a href="#Sarsa价值网络形式-1" class="headerlink" title="Sarsa价值网络形式"></a>Sarsa价值网络形式</h5><p><img src="/2021/03/30/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-sarsa/4.png" alt="4"></p><ul><li>通过价值网络q(s,a;w)近似$Q_{π}(s,a)$</li><li>q作为一个评论家来评估演员的好坏。（Actor-Critic方法）</li><li>学习参数w。</li></ul><h5 id="学习流程-1"><a href="#学习流程-1" class="headerlink" title="学习流程"></a>学习流程</h5><p><img src="/2021/03/30/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-sarsa/5.png" alt="5"></p><h2 id="Sarsa总结"><a href="#Sarsa总结" class="headerlink" title="Sarsa总结"></a>Sarsa总结</h2><p>目标：学习动作价值函数$Q_{π}$<br>形式：</p><ul><li><p>表格</p><ul><li>直接学习Qπ</li><li>有限的状态和动作</li><li>绘制表格，通过sarsa更新表格的动作价值</li></ul></li><li><p>价值神经网络</p><ul><li>根据价值网络$q(s,a;w)$近似$Q_{π}$</li><li>使用sarsa更新参数</li><li>应用：actor-critic方法</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 强化学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度强化学习实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度强化学习实战之Actor-Critic</title>
      <link href="2021/03/30/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-actor-critic/"/>
      <url>2021/03/30/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-actor-critic/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Actor-Critic合并了策略学习和价值学习两种强化学习算法。Actor是策略网络，用来控制agent运动，可以看做演员；Critic是价值网络，用来给动作打分，可以看做评论家员。</p><p><img src="/2021/03/30/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-actor-critic/1.png" alt="1"></p><h5 id="价值网络和策略网络"><a href="#价值网络和策略网络" class="headerlink" title="价值网络和策略网络"></a>价值网络和策略网络</h5><p>状态价值函数</p><p>$V_{π}=\sum_{a}π(a|s)·Q_{π}(s,a)≈\sum_{a}π(a|s;θ)·Q_{π}(s,a;w)$</p><p>公式中π和$Q_{π}$都是未知的。</p><p>策略网络(actor)</p><ul><li>使用神经网络$π(a|s;θ)$去近似$π(a|s)$</li><li>神经网络训练参数θ</li></ul><p>价值网络(critic)</p><ul><li>使用神经网络$q(s,a;w)$去近似$Q_{π}(s,a)$</li><li>神经网络训练参数w</li></ul><p>actor是个演员可以做动作，但他不知道什么是好的动作，这时候就需要评论家critic来评判。学习这两个网络的目的是让演员的平均分越来越高，同时让评论家的打分越来越准。</p><p><img src="/2021/03/30/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-actor-critic/2.png" alt="2"></p><p><img src="/2021/03/30/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-actor-critic/3.png" alt="3"></p><h5 id="训练神经网络"><a href="#训练神经网络" class="headerlink" title="训练神经网络"></a>训练神经网络</h5><p>使用神经网络近似这两个函数</p><p>$V(s;θ,w)=\sum_{a}π(a|s;θ)·q(s,a;w)$</p><p>更新参数θ和w</p><p>更新策略网络$π(a|s;θ)$为了增加状态值$V(s;θ,w)$。</p><p>更新价值网络q(s,a;w)为了打分越来越精准。</p><ol><li>观测状态$s_{t}$。</li><li>随机抽样根据$π(·|s_{t};θ_{t})$得到动作$a_{t}$。</li><li>完成$a_{t}$并观测新的状态$s_{t+1}$和奖励$r_{t}$。</li><li>更新w(价值网络参数)使用时间差异(TD)。</li><li>更新θ(策略网络参数)使用策略梯度。</li></ol><h5 id="使用TD算法更新价值网络q"><a href="#使用TD算法更新价值网络q" class="headerlink" title="使用TD算法更新价值网络q"></a>使用TD算法更新价值网络q</h5><ul><li>计算$q(s_{t},a_{t};w_{t})$和$q(s_{t+1},a_{t+1};w_{t})$</li><li>TD target: $y_{t}=r_{t}+γ·q(s_{t+1},a_{t+1};w_{t})$</li><li>损失: $L(w)=\frac{1}{2}[q(s_{t},a_{t};w)-y_{t}]^{2}$</li><li>梯度下降: $w_{t+1}=w_{t}-α·\frac{∂L(w)}{∂w}|w=w_{t}$</li></ul><p>使得评论家打分更准。</p><h5 id="使用策略梯度更新策略网络π"><a href="#使用策略梯度更新策略网络π" class="headerlink" title="使用策略梯度更新策略网络π"></a>使用策略梯度更新策略网络π</h5><ul><li><p>神经网络近似状态价值函数$V(s;θ,w)=\sum_{a}π(a|s;θ)·q(s,a;w)$</p></li><li><p>策略梯度，更新$V(s_{t};θ,w)$的θ</p></li></ul><p>$g(a,θ)=\frac{∂logπ(a|s,θ)}{∂θ}·q(s_{t},a;w)$</p><p>$\frac{∂V(s;θ,w_{t})}{∂θ}=E_{A}[g(A, θ)]$</p><p>根据π函数随机采样a，$θ_{t+1}=θ_{t}+β·g(a,θ_{t})$。</p><p>使得演员得分更高。</p><h5 id="Actor-Critic总结"><a href="#Actor-Critic总结" class="headerlink" title="Actor-Critic总结"></a>Actor-Critic总结</h5><ol><li>观测状态点$s_{t}$和随机抽样$a_{t}$~$π(·|s_{t};θ_{t})$</li><li>完成$a_{t}$，环境给一个新的状态点$s_{t+1}$和回报$r_{t}$</li><li>随机抽样$a_{t+1}^{-}$~$π(·|s_{t};θ_{t})$，注意并未执行$a_{t+1}^{-}$</li><li>评估价值网络$q_{t}=q(s_{t},a_{t};w_{t})$和$q_{t+1}=q(s_{t+1},a_{t+1}^{-};w_{t})$</li><li>计算TD error: $σ_{t}=q_{t}-(r_{t}+γ·q_{t+1})$</li><li>价值网络求导: $d_{w,t}=\frac{∂q(s_{t},a_{t};w)}{∂w}|w=w_{t}$</li><li>更新价值网络: $w_{t+1}=w_{t}-α·σ_{t}·d_{w,t}$</li><li>策略网络求导: $d_{θ,t}=\frac{∂logπ(a_{t}|s_{t};θ)}{∂θ}|θ=θ_{t}$</li><li>更新策略网络: $θ_{t+1}=θ_{t}+β·q_{t}·d_{θ,t}$</li></ol>]]></content>
      
      
      <categories>
          
          <category> 强化学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度强化学习实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度强化学习实战之策略学习</title>
      <link href="2021/03/29/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-ce-lue-xue-xi/"/>
      <url>2021/03/29/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-ce-lue-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="策略学习"><a href="#策略学习" class="headerlink" title="策略学习"></a>策略学习</h2><h5 id="policy函数"><a href="#policy函数" class="headerlink" title="policy函数"></a>policy函数</h5><p>策略，根据观测的状态来做出决策来控制agent的运动。</p><p>policy函数，$π(s, a)$，范围[0,1]，其中</p><p>$π(s, a) = P(A=a|S=s)$，根据policy函数，可以求出给定状态s，采取动作a的概率。</p><p>理想中，我们可以采用$s × a$的表代表policy的概率，但对于超级玛丽这种游戏，有无数种状态，需要用一个policy网络来近似。</p><h5 id="policy-network"><a href="#policy-network" class="headerlink" title="policy network"></a>policy network</h5><p>策略网络（policy network）$π(a|s;θ)$近似$π(a|s)$。<br><img src="/2021/03/29/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-ce-lue-xue-xi/1.png" alt="1"></p><p>$\sum_{a∈A}(a|s;θ)=1$，其中A={‘left’, ‘right’, ‘up’}，是一个动作集合。</p><h5 id="回报"><a href="#回报" class="headerlink" title="回报"></a>回报</h5><p>return，当前和未来的累计奖励</p><p>$U_{t} = R_{t} + γR_{t+1} + γ^{2}R_{t+2}…$</p><h5 id="动作值函数"><a href="#动作值函数" class="headerlink" title="动作值函数"></a>动作值函数</h5><p>$Q_π(S_{t}, a_{t})=E[U_{t}|S_{t}=s_{t},A_{t}=a_{t}]$</p><h5 id="状态值函数"><a href="#状态值函数" class="headerlink" title="状态值函数"></a>状态值函数</h5><p>$V_{π}(s_{t})=E_{A}[Q_{π}(s_{t}, A)]=\sum_{a}π(a|s_{t})·Q_{π}(s_{t}, a)$</p><p><strong>近似状态值函数</strong></p><p>$V_{π}(s_{t};θ)=E_{A}[Q_{π}(s_{t}, A)]=\sum_{a}π(a|s_{t};θ)·Q_{π}(s_{t}, a)$</p><p>目标是最大化状态价值的期望，$J(θ)=E_{S}[V(S;θ)]$</p><p>如何更新θ呢？</p><p>$θ &lt;- θ + β·\frac{∂V(s;θ)}{∂θ}$</p><h5 id="策略梯度"><a href="#策略梯度" class="headerlink" title="策略梯度"></a>策略梯度</h5><ul><li>第一种形式</li></ul><p>$\frac{∂V(s;θ)}{∂θ}=\frac{∂\sum_{a}π(a|s;θ)·Q_{π}(s,a)}{∂θ}$</p><p>= $\sum_{a}\frac{∂π(a|s;θ)·Q_{π}(s,a)}{∂θ}$</p><p>= $\sum_{a}\frac{∂π(a|s;θ)}{∂θ}·Q_{π}(s,a)$ // 假设θ是独立于$Q_{π}$。</p><ul><li>第二种形式</li></ul><p>$\frac{∂V(s;θ)}{∂θ}$ = $\sum_{a}\frac{∂π(a|s;θ)}{∂θ}·Q_{π}(s,a)$</p><p>= $\sum_{a}π(a|s;θ)·\frac{∂logπ(a|s;θ)}{∂θ}$</p><p>这两种形式是等价的，离散的使用第一种，连续的使用第二种。</p><p>对于离散的动作，我们取第一种。<br><img src="/2021/03/29/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-ce-lue-xue-xi/2.png" alt="2"></p><p>对于连续的动作，可以有[0,1]所有的实数，动作有无数种，无法做动作的加和，故使用第二个公式。<br>先通过policyπ函数随机抽样一个a，然后根据蒙特卡洛近似出g，使用g近似策略梯度。<br><img src="/2021/03/29/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-ce-lue-xue-xi/3.png" alt="3"></p><h5 id="策略梯度算法总结"><a href="#策略梯度算法总结" class="headerlink" title="策略梯度算法总结"></a>策略梯度算法总结</h5><ol><li>观测到$s_t$</li><li>策略网络随机抽样动作$a_t$</li><li>计算t时刻的动作价值$q_{t}≈Q_{π}(s_{t}, a_{t})$</li><li>对策略网络求导$d_{θ,t}=\frac{∂logπ(a_{t}|s_{t};θ)}{∂θ}|θ=θ_{t}$</li><li>近似策略梯度$g(a_{t},θ_{t})=q_{t}·d_{θ,t}$</li><li>更新策略网络$θ_{t+1}=θ_{t}+β·g(a_{t},θ_{t})$</li></ol><h5 id="如何计算-Q-π-s-t-a-t"><a href="#如何计算-Q-π-s-t-a-t" class="headerlink" title="如何计算$Q_{π}(s_{t},a_{t})$"></a>如何计算$Q_{π}(s_{t},a_{t})$</h5><p>方式一：增强(reinforce)</p><p>用策略网络π控制小球运动，从开始玩到游戏结束。s1,a1,r1,s2,a2,r2…sT,aT,rT，然后计算所有奖励r的加权求和。</p><p>计算所有r的$u_{t}=\sum_{k=t}^{T}r^{k-t}r_{k}$</p><p>因为$Qπ(s_{t},a_{t})=E[U_{t}]$，我们使用$u_{t}$近似$Qπ(s_{t},a_{t})$。</p><p>方式二：使用神经网络近似$Q_{π}$</p><p>这样就有了两个网络，一个用来近似π，一个用来近似$Q_{π}$</p><h2 id="策略学习总结"><a href="#策略学习总结" class="headerlink" title="策略学习总结"></a>策略学习总结</h2><ol><li>我们希望得到策略函数π，然后用π自动控制agent运动。每当agent观察st，agent就用π自动算出at。</li><li>直接求策略函数比较困难，故用神经网络近似策略函数，这个网络称为策略网络(policy network)$π(a|s;θ)$。</li><li>根据策略梯度学习策略网络。</li><li>策略梯度是状态价值函数V关于θ的导数$E_{S}[V(S;θ)]$。（注：目标函数是状态价值V关于状态的期望）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 强化学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度强化学习实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 57. 和为s的两个数字</title>
      <link href="2021/03/29/jian-zhi-offer-57.he-wei-s-de-liang-ge-shu-zi/"/>
      <url>2021/03/29/jian-zhi-offer-57.he-wei-s-de-liang-ge-shu-zi/</url>
      
        <content type="html"><![CDATA[<p>剑指 Offer 57. 和为s的两个数字<br>输入一个递增排序的数组和一个数字s，在数组中查找两个数，使得它们的和正好是s。如果有多对数字的和等于s，则输出任意一对即可。</p><p>示例 1：<br>输入：nums = [2,7,11,15], target = 9<br>输出：[2,7] 或者 [7,2]<br>示例 2：</p><p>输入：nums = [10,26,30,31,47,60], target = 40<br>输出：[10,30] 或者 [30,10]</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>前后双指针。前后两个指针分别指向第一个和最后一个元素，若二者和等于target则输出结果，若小于target则i++，若大于target则j–。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                res <span class="token operator">=</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span>                <span class="token keyword">break</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">:</span>                j <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res</code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度强化学习实战之价值学习</title>
      <link href="2021/03/29/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-jie-zhi-xue-xi/"/>
      <url>2021/03/29/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-jie-zhi-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><h5 id="Return"><a href="#Return" class="headerlink" title="Return"></a>Return</h5><p>回报，未来的累计奖励。</p><p>$U_{t} = R_{t} + γR_{t+1} + γ^{2}R_{t+2}…$</p><p>回报取决于动作$A_{t}, A_{t+1}, A_{t+2}$…和状态$S_{t}, S_{t+1}, S_{t+2}…$</p><ul><li><p>动作的随机性来自于策略函数，$P[A=a|S=s]=π(a|s)$。</p></li><li><p>状态的随机性来自于状态转移函数，$P[S^{‘}=s^{‘}|S=s,A=a]=p(s^{‘}|s,a)$</p></li></ul><h5 id="动作价值函数和策略π"><a href="#动作价值函数和策略π" class="headerlink" title="动作价值函数和策略π"></a>动作价值函数和策略π</h5><p>$Q_{π}(S_{t}, a_{t})=E[U_{t}|S_{t}, A_{t}=a_{t}]$</p><p>Q值和π和当前的s,a有关，未来的随机性被期望消除了。Qπ只依赖于当前状态和动作，可以反映在当前状态做动作的好坏程度。</p><h5 id="最优动作价值函数"><a href="#最优动作价值函数" class="headerlink" title="最优动作价值函数"></a>最优动作价值函数</h5><p>$Q^{*}(S_{t},a_{t})=max_{π}Q_{π}(s_{t},a_{t})$</p><p>Q*函数基于当前状态st做at的好坏程度，消除了策略π的影响，无论选择何种策略，当前Q都是最好的。</p><h2 id="DQN"><a href="#DQN" class="headerlink" title="DQN"></a>DQN</h2><p>我们的目标是获取最大收益。</p><p>问题：假设已知$Q*(s,a)$函数，如何选择最好的动作？</p><p>答案：显然最好的动作是使Q值最大的$a*=argmax_{a}Q*(s,a)$，但是我们并不知道$Q*(s,a)$。</p><p>挑战：如何学习出一个Q*函数，可以像先知一样，知道走哪一步最好？</p><p>解决方案：DQN（Deep Q Network）算法，是价值学习方法。使用神经网络$Q(s,a;w)$去近似$Q*(s,a)$函数，神经网络的输入是s，参数是w，输出是很多数值，这些数值是对所有动作的打分，通过奖励来学习神经网络。</p><p><img src="/2021/03/29/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-jie-zhi-xue-xi/1.png" alt="1"></p><p><img src="/2021/03/29/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-jie-zhi-xue-xi/2.png" alt="2"><br>DQN主要学习的是Q函数，神经网络根据输入s，通过Q函数来选择a，然后获得奖励以及新状态…。</p><h2 id="TD"><a href="#TD" class="headerlink" title="TD"></a>TD</h2><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>如图所示，驾车从NYC(纽约)到Atlanta(亚特兰大)，模型Q(w)预测时间为1000分钟，如何更新模型呢？</p><p>预测值$q=Q(w), q=1000$，真实值y=860，损失$L=\frac{1}{2}(q-y)^{2}$，<br>梯度为$\frac{∂L}{∂w}=\frac{∂q}{∂w}·\frac{∂L}{∂q}=(q-y)·\frac{∂Q(w)}{∂w}$，<br>$w_{t+1}=w_{t}-α·\frac{∂L}{∂w}|w=w_{t}$<br><img src="/2021/03/29/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-jie-zhi-xue-xi/3.png" alt="3"></p><p>这种算法的确定是必须走完全程，才能更新一次参数。TD算法是如何做的呢？</p><ul><li>模型最初的预测$Q(w)=1000$分钟。</li><li>当走了300分钟到达DC时，模型预测600分钟到达Atlanta。更新预测300+600=900分钟。</li><li>TD target900比最初的预测1000分钟更加可靠，因为其中有真实的部分。<br><img src="/2021/03/29/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-jie-zhi-xue-xi/4.png" alt="4"><br>注意到，第一次预测减去第二次预测的值就是TD error。这种方法同样适用于DQN的训练。第一次预测的动作打分是qt，然后前进一步，做出第二次打分yt，yt-qt就是TD error，不断优化这个TD error，模型对动作打分的预测会越来越准。<br><img src="/2021/03/29/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-jie-zhi-xue-xi/5.png" alt="5"></li></ul><p>TD（Temporal Difference Learning）是常用于训练DQN的方法。</p><h5 id="价值学习总结"><a href="#价值学习总结" class="headerlink" title="价值学习总结"></a>价值学习总结</h5><ol><li>观测当前状态$S_{t}=s_{t}$和动作$A_{t}=a_{t}$</li><li>用DQN做一次计算，输入是st，输出是at的打分qt,$q_{t}=Q(s_{t},a_{t};w_{t})$</li><li>用反向传播对DQN求导，得到梯度dt，$dt=\frac{∂Q(s_{t},a_{t};w)}{∂w}|w=w_{t}$</li><li>环境给出新的状态$s_{t+1}$和奖励$r_{t}$</li><li>计算TD target: $y_{t}=r_{t}+γ·max_{a}Q(s_{t+1},a;w_{t})$</li><li>梯度下降，$w_{t+1}=w_{t}-α·(q_{t}-y_{t})·d_{t}$</li></ol>]]></content>
      
      
      <categories>
          
          <category> 强化学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度强化学习实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度强化学习实战之基本概念</title>
      <link href="2021/03/28/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-ji-ben-gai-nian/"/>
      <url>2021/03/28/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-ji-ben-gai-nian/</url>
      
        <content type="html"><![CDATA[<h2 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h2><p>强化学习是一种试错方法，目标是让智能体在特定环境能够采取回报最大化的行为。</p><p>按照学习方式不同，强化学习可以分为：</p><ul><li><p>基于概率（Policy-Based RL）</p><ul><li>policy gradients</li></ul></li><li><p>基于价值（Value-Based RL）</p><ul><li>Q-Learning</li><li>sarsa</li></ul></li></ul><p>按照更新方式不同，强化学习可以分为</p><ul><li><p>回合更新</p><ul><li>基础版policy gradients</li><li>monte-carlo learning</li></ul></li><li><p>单步更新</p><ul><li>Q-Learning</li><li>Sarsa</li><li>升级版Policy Gradients</li></ul></li></ul><p>流行的强化学习方法包括：</p><ul><li>自适应动态规划 ADP</li><li>时间差分学习 TD</li><li>状态-动作-回报-状态-动作算法 SARSA</li><li>Q-Learning</li><li>深度强化学习 DQN</li></ul><p>其主要应用于下棋类、机器人控制和工作调度等。</p><h5 id="随机变量"><a href="#随机变量" class="headerlink" title="随机变量"></a>随机变量</h5><p>随机变量只取决于随机事件的结果。<br><img src="/2021/03/28/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-ji-ben-gai-nian/1.png" alt="1"></p><ul><li>X: 随机变量</li><li>x: 观测值</li></ul><p>比如扔了4次硬币，得到4个观测值为</p><ul><li>x1=1 </li><li>x2=0 </li><li>x3=0 </li><li>x4=1。</li></ul><h5 id="概率密度函数"><a href="#概率密度函数" class="headerlink" title="概率密度函数"></a>概率密度函数</h5><p>概率密度函数意味着某个随机变量在某个确定的取值点附近的可能性。包括连续分布和离散分布。</p><p>1）高斯分布又叫正态分布，是一个连续分布。<br>$p(x) = \frac{1}{\sqrt{2πσ^{2}}}exp(-\frac{(x-μ)^{2}}{2σ^{2}})$<br><img src="/2021/03/28/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-ji-ben-gai-nian/2.png" alt="2"><br>横坐标是随机变量的取值，纵坐标是概率值。该曲线说明，高斯分布的概率密度在原点取值比较大，两边取值比较小。</p><p>2）离散概率分布。</p><p>随机变量X∈{1,3,7}，p(1)=0.2, p(3)=0.5, p(7)=0.3。<br><img src="/2021/03/28/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-ji-ben-gai-nian/3.png" alt="3"><br>该图说明，X在1、3、7有值，其他概率均为0。</p><h5 id="期望"><a href="#期望" class="headerlink" title="期望"></a>期望</h5><p>若将随机变量X的定义域设为χ，则对于连续分布有$\int_{χ}p(x)dx=1$，对于离散分布有$\sum_{x∈χ}p(x)=1$。</p><p>1）对于连续分布，f(X)的期望为：</p><p>$E[f(X)] = \int_{χ}p(x)·f(x)dx$</p><p>2）对于离散分布，f(X)的期望为：</p><p>$E[f(X)] = \sum_{x∈χ}p(x)·f(x)$</p><h2 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h2><h5 id="强化学习-1"><a href="#强化学习-1" class="headerlink" title="强化学习"></a>强化学习</h5><p>强化学习的专业术语包括：state、action、agent、policy。</p><h5 id="agent"><a href="#agent" class="headerlink" title="agent"></a>agent</h5><p>agent做动作的智能体，例如超级玛丽中玛丽就是agent，自动驾驶中汽车是agent。</p><h5 id="state"><a href="#state" class="headerlink" title="state"></a>state</h5><p>state当前agent所处的状态，例如整个界面就是state。</p><h5 id="action"><a href="#action" class="headerlink" title="action"></a>action</h5><p>agent的动作，例如玛丽的上下左右。</p><h5 id="policy"><a href="#policy" class="headerlink" title="policy"></a>policy</h5><p>策略，根据观测的状态来做出决策来控制agent的运动。</p><p>policy函数，$π(s, a)$，范围[0,1]，其中</p><p>$π(s, a) = P(A=a|S=s)$，根据policy函数，可以求出给定状态s，采取动作a的概率。</p><h5 id="reward"><a href="#reward" class="headerlink" title="reward"></a>reward</h5><p>reward，agent获取的奖励。例如对于玛丽而言奖励为R，则</p><ul><li>收集金币 R+=1</li><li>赢得比赛 R += 10000</li><li>碰到敌人 R -= 10000</li><li>什么也没发生 R = 0</li></ul><h5 id="state-transition"><a href="#state-transition" class="headerlink" title="state transition"></a>state transition</h5><p>state transition，状态转移。例如：当前状态玛丽做一个动作，就会产生一个新状态。</p><p>状态转移是随机的，其随机性是从环境中来的。例如玛丽跳起来，敌人可能发射子弹，也可能不发射，而且发射子弹的概率只有环境知道，下一个状态具有随机性。</p><p><img src="/2021/03/28/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-ji-ben-gai-nian/4.png" alt="4"></p><h5 id="agent和环境交互"><a href="#agent和环境交互" class="headerlink" title="agent和环境交互"></a>agent和环境交互</h5><p><img src="/2021/03/28/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-ji-ben-gai-nian/5.png" alt="5"><br>例如，agent（玛丽）看到状态（游戏图片）之后，产生动作（上下左右），环境产生一个新的state同时给agent一个奖励。</p><p>(state, action, reward)产生轨迹为s1,a1,r1,s2,a2,r2…sT,aT,rT.</p><h5 id="2个随机性"><a href="#2个随机性" class="headerlink" title="2个随机性"></a>2个随机性</h5><p>强化学习中有2个随机性，这两个随机性对理解强化学习非常重要。<br>一个随机性是来自agengt动作，因为agent动作是根据policy函数随机抽样得到。<br><img src="/2021/03/28/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-ji-ben-gai-nian/6.png" alt="6"></p><p>另一个随机性来自状态转移（下一个状态）。例如已知当前状态S，并根据policy函数随机抽样产生动作a，系统会随机抽样产生下一个状态。<br>其中，下一个状态有0.8的概率达到一种状态（发射），0.2的概率达到另一种状态。（不发射）<br><img src="/2021/03/28/shen-du-qiang-hua-xue-xi-shi-zhan-zhi-ji-ben-gai-nian/7.png" alt="7"></p><h5 id="回报"><a href="#回报" class="headerlink" title="回报"></a>回报</h5><p>Return，回报。未来的累计奖励。</p><p>$U_{t} = R_{t} + R_{t+1} + R_{t+2}…$</p><p>因为未来的奖励没有当前的折扣值钱，所有未来的奖励增加一个折扣奖励的概念。</p><p>$U_{t} = R_{t} + γR_{t+1} + γ^{2}R_{t+2}…$</p><h5 id="动作价值函数-Q-s-a"><a href="#动作价值函数-Q-s-a" class="headerlink" title="动作价值函数$Q(s,a)$"></a>动作价值函数$Q(s,a)$</h5><p>事实上，Ut是个随机的变量，无法直接求得，依赖于未来的动作At,At+1,At+2…和状态St,St+1,St+2…。</p><p>如何解决呢？</p><p>Ut未知，St和At为变量且已知它的概率密度函数，则可以通过对Ut求期望的方式求得Qπ。定义Action-value function for policy π。</p><p>$Q_π(S_{t}, a_{t})=E[U_{t}|S_{t}=s_{t},A_{t}=a_{t}]$</p><p>Qπ的直观意义，已知policy函数π，Qπ就会给当前状态下所有的动作打分，然后知道哪个动作好，哪个动作不好。</p><p>那如何选择最好的policy函数π呢？</p><p>可选择policy函数有无数种，最好的policy函数应该是使Q值最大化的那个π。</p><p>$Q^{*}(s_{t}, a_{t})=max_{π}Q_{π}(s_{t}, a_{t})$</p><h5 id="状态价值函数"><a href="#状态价值函数" class="headerlink" title="状态价值函数"></a>状态价值函数</h5><p>动作是离散的</p><p>$V_{π}(s_{t})=E_{A}[Q_{π}(s_{t}, A)]=\sum_{a}π(a|s_{t})·Q_{π}(s_{t}, a)$</p><p>动作是连续的</p><p>$V_{π}(s_{t})=E_{A}[Q_{π}(s_{t}, A)]=\intπ(a|s_{t})·Q_{π}(s_{t}, a)da$</p><p>Vπ可以告诉我们当前的形势好不好。对A求期望可以将A消掉。</p><h5 id="价值函数"><a href="#价值函数" class="headerlink" title="价值函数"></a>价值函数</h5><p>总计一下，总共有两种价值函数。一种是动作价值函数，一种是状态价值函数。</p><p>动作价值函数，它和policyπ、状态s、动作a有关。它是Ut的条件期望，Ut是未来所有奖励的加权求和，希望把未来的状态和动作都消除，只留下st和at这两个变量。</p><p>评估的是一个智能体在状态s使用动作a是否明智，可以给动作a打分。</p><p>状态价值函数</p><p>状态价值函数，它和policyπ、状态s有关，和动作a无关。</p><p>若使用policyπ，评估当前状态是好是坏。它还可以用来评价policy函数π的好坏，若π越好，Vπ的值越大。</p><h5 id="如何自动打游戏"><a href="#如何自动打游戏" class="headerlink" title="如何自动打游戏"></a>如何自动打游戏</h5><p>一） 学习Policy函数$π(a|s)$</p><ul><li>policy可以根据观测到的状态st做动作，π(·|st)可以给出各个动作的概率，随机采样出动作at。</li></ul><p>二）学习最优动作价值函数$Q^{*}(s,a)$</p><ul><li>观测状态st，选择一个动作可以最大化Q<em>值，Q</em>是未来累计奖励。</li></ul><p>所以，强化学习就是学习π函数或者Q*函数。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><ol><li>价值学习</li></ol><ul><li>Deep Q network$(DQN)$，学习$Q*(s,a)$函数。</li><li>如何使用temporal different$(TD)$学习神经网络的参数。</li></ul><ol start="2"><li>策略学习</li></ol><ul><li>policy network，学习$π(a|s)$。</li><li>使用策略梯度学习神经网络的参数。</li></ul><ol start="3"><li><p>Actor-critic method，策略网络和价值网络的结合。</p></li><li><p>AlphaGo的示例。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 强化学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度强化学习实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/03/20/hello-world/"/>
      <url>2021/03/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
